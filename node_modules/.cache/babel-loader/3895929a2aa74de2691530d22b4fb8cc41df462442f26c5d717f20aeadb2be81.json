{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst idtokenclient_1 = require(\"./idtokenclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n  constructor(opts) {\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined;\n    // To save the contents of the JSON credential file\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  }\n  // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n  get isGCE() {\n    return this.checkIsGCE;\n  }\n  getProjectId(callback) {\n    if (callback) {\n      this.getProjectIdAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getProjectIdAsync();\n    }\n  }\n  getProjectIdAsync() {\n    if (this._cachedProjectId) {\n      return Promise.resolve(this._cachedProjectId);\n    }\n    // In implicit case, supports three environments. In order of precedence,\n    // the implicit environments are:\n    // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n    // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n    // - Cloud SDK: `gcloud config config-helper --format json`\n    // - GCE project ID from metadata server)\n    if (!this._getDefaultProjectIdPromise) {\n      // TODO: refactor the below code so that it doesn't mix and match\n      // promises and async/await.\n      this._getDefaultProjectIdPromise = new Promise(\n      // eslint-disable-next-line no-async-promise-executor\n      async (resolve, reject) => {\n        try {\n          const projectId = this.getProductionProjectId() || (await this.getFileProjectId()) || (await this.getDefaultServiceProjectId()) || (await this.getGCEProjectId());\n          this._cachedProjectId = projectId;\n          if (!projectId) {\n            throw new Error('Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started');\n          }\n          resolve(projectId);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n    return this._getDefaultProjectIdPromise;\n  }\n  getApplicationDefault(optionsOrCallback = {}, callback) {\n    let options;\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n    if (callback) {\n      this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n    } else {\n      return this.getApplicationDefaultAsync(options);\n    }\n  }\n  async getApplicationDefaultAsync(options = {}) {\n    // If we've already got a cached credential, just return it.\n    if (this.cachedCredential) {\n      return {\n        credential: this.cachedCredential,\n        projectId: await this.getProjectIdAsync()\n      };\n    }\n    let credential;\n    let projectId;\n    // Check for the existence of a local environment variable pointing to the\n    // location of the credential file. This is typically used in local\n    // developer scenarios.\n    credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n    if (credential) {\n      if (credential instanceof jwtclient_1.JWT) {\n        credential.defaultScopes = this.defaultScopes;\n        credential.scopes = this.scopes;\n      }\n      this.cachedCredential = credential;\n      projectId = await this.getProjectId();\n      return {\n        credential,\n        projectId\n      };\n    }\n    // Look in the well-known credential file location.\n    credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n    if (credential) {\n      if (credential instanceof jwtclient_1.JWT) {\n        credential.defaultScopes = this.defaultScopes;\n        credential.scopes = this.scopes;\n      }\n      this.cachedCredential = credential;\n      projectId = await this.getProjectId();\n      return {\n        credential,\n        projectId\n      };\n    }\n    // Determine if we're running on GCE.\n    let isGCE;\n    try {\n      isGCE = await this._checkIsGCE();\n    } catch (e) {\n      e.message = `Unexpected error determining execution environment: ${e.message}`;\n      throw e;\n    }\n    if (!isGCE) {\n      // We failed to find the default credentials. Bail out with an error.\n      throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n    }\n    // For GCE, just return a default ComputeClient. It will take care of\n    // the rest.\n    options.scopes = this.scopes || this.defaultScopes;\n    this.cachedCredential = new computeclient_1.Compute(options);\n    projectId = await this.getProjectId();\n    return {\n      projectId,\n      credential: this.cachedCredential\n    };\n  }\n  /**\n   * Determines whether the auth layer is running on Google Compute Engine.\n   * @returns A promise that resolves with the boolean.\n   * @api private\n   */\n  async _checkIsGCE() {\n    if (this.checkIsGCE === undefined) {\n      this.checkIsGCE = await gcpMetadata.isAvailable();\n    }\n    return this.checkIsGCE;\n  }\n  /**\n   * Attempts to load default credentials from the environment variable path..\n   * @returns Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n  async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n    const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n    if (!credentialsPath || credentialsPath.length === 0) {\n      return null;\n    }\n    try {\n      return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n    } catch (e) {\n      e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n      throw e;\n    }\n  }\n  /**\n   * Attempts to load default credentials from a well-known file location\n   * @return Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n  async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n    // First, figure out the location of the file, depending upon the OS type.\n    let location = null;\n    if (this._isWindows()) {\n      // Windows\n      location = process.env['APPDATA'];\n    } else {\n      // Linux or Mac\n      const home = process.env['HOME'];\n      if (home) {\n        location = path.join(home, '.config');\n      }\n    }\n    // If we found the root path, expand it.\n    if (location) {\n      location = path.join(location, 'gcloud', 'application_default_credentials.json');\n      if (!fs.existsSync(location)) {\n        location = null;\n      }\n    }\n    // The file does not exist.\n    if (!location) {\n      return null;\n    }\n    // The file seems to exist. Try to use it.\n    const client = await this._getApplicationCredentialsFromFilePath(location, options);\n    return client;\n  }\n  /**\n   * Attempts to load default credentials from a file at the given path..\n   * @param filePath The path to the file to read.\n   * @returns Promise that resolves with the OAuth2Client\n   * @api private\n   */\n  async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n    // Make sure the path looks like a string.\n    if (!filePath || filePath.length === 0) {\n      throw new Error('The file path is invalid.');\n    }\n    // Make sure there is a file at the path. lstatSync will throw if there is\n    // nothing there.\n    try {\n      // Resolve path to actual file in case of symlink. Expect a thrown error\n      // if not resolvable.\n      filePath = fs.realpathSync(filePath);\n      if (!fs.lstatSync(filePath).isFile()) {\n        throw new Error();\n      }\n    } catch (err) {\n      err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n      throw err;\n    }\n    // Now open a read stream on the file, and parse it.\n    const readStream = fs.createReadStream(filePath);\n    return this.fromStream(readStream, options);\n  }\n  /**\n   * Create a credentials instance using the given input options.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n  fromJSON(json, options) {\n    let client;\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the Google auth settings.');\n    }\n    options = options || {};\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n      client.defaultScopes = this.defaultScopes;\n    }\n    client.fromJSON(json);\n    return client;\n  }\n  /**\n   * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n   * object used to instantiate and the client.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n  _cacheClientFromJSON(json, options) {\n    let client;\n    // create either a UserRefreshClient or JWT client.\n    options = options || {};\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n      client.defaultScopes = this.defaultScopes;\n    }\n    client.fromJSON(json);\n    // cache both raw data used to instantiate client and client itself.\n    this.jsonContent = json;\n    this.cachedCredential = client;\n    return this.cachedCredential;\n  }\n  fromStream(inputStream, optionsOrCallback = {}, callback) {\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n    if (callback) {\n      this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n    } else {\n      return this.fromStreamAsync(inputStream, options);\n    }\n  }\n  fromStreamAsync(inputStream, options) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the Google auth settings.');\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          try {\n            const data = JSON.parse(s);\n            const r = this._cacheClientFromJSON(data, options);\n            return resolve(r);\n          } catch (err) {\n            // If we failed parsing this.keyFileName, assume that it\n            // is a PEM or p12 certificate:\n            if (!this.keyFilename) throw err;\n            const client = new jwtclient_1.JWT({\n              ...this.clientOptions,\n              keyFile: this.keyFilename\n            });\n            this.cachedCredential = client;\n            return resolve(client);\n          }\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n  /**\n   * Create a credentials instance using the given API key string.\n   * @param apiKey The API key string\n   * @param options An optional options object.\n   * @returns A JWT loaded from the key\n   */\n  fromAPIKey(apiKey, options) {\n    options = options || {};\n    const client = new jwtclient_1.JWT(options);\n    client.fromAPIKey(apiKey);\n    return client;\n  }\n  /**\n   * Determines whether the current operating system is Windows.\n   * @api private\n   */\n  _isWindows() {\n    const sys = os.platform();\n    if (sys && sys.length >= 3) {\n      if (sys.substring(0, 3).toLowerCase() === 'win') {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Run the Google Cloud SDK command that prints the default project ID\n   */\n  async getDefaultServiceProjectId() {\n    return new Promise(resolve => {\n      child_process_1.exec('gcloud config config-helper --format json', (err, stdout) => {\n        if (!err && stdout) {\n          try {\n            const projectId = JSON.parse(stdout).configuration.properties.core.project;\n            resolve(projectId);\n            return;\n          } catch (e) {\n            // ignore errors\n          }\n        }\n        resolve(null);\n      });\n    });\n  }\n  /**\n   * Loads the project id from environment variables.\n   * @api private\n   */\n  getProductionProjectId() {\n    return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n  }\n  /**\n   * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n   * @api private\n   */\n  async getFileProjectId() {\n    if (this.cachedCredential) {\n      // Try to read the project ID from the cached credentials file\n      return this.cachedCredential.projectId;\n    }\n    // Ensure the projectId is loaded from the keyFile if available.\n    if (this.keyFilename) {\n      const creds = await this.getClient();\n      if (creds && creds.projectId) {\n        return creds.projectId;\n      }\n    }\n    // Try to load a credentials file and read its project ID\n    const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n    if (r) {\n      return r.projectId;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Gets the Compute Engine project ID if it can be inferred.\n   */\n  async getGCEProjectId() {\n    try {\n      const r = await gcpMetadata.project('project-id');\n      return r;\n    } catch (e) {\n      // Ignore any errors\n      return null;\n    }\n  }\n  getCredentials(callback) {\n    if (callback) {\n      this.getCredentialsAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getCredentialsAsync();\n    }\n  }\n  async getCredentialsAsync() {\n    await this.getClient();\n    if (this.jsonContent) {\n      const credential = {\n        client_email: this.jsonContent.client_email,\n        private_key: this.jsonContent.private_key\n      };\n      return credential;\n    }\n    const isGCE = await this._checkIsGCE();\n    if (!isGCE) {\n      throw new Error('Unknown error.');\n    }\n    // For GCE, return the service account details from the metadata server\n    // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n    // The GCF metadata server doesn't respect querystring params if this / is\n    // not included.\n    const data = await gcpMetadata.instance({\n      property: 'service-accounts/',\n      params: {\n        recursive: 'true'\n      }\n    });\n    if (!data || !data.default || !data.default.email) {\n      throw new Error('Failure from metadata server.');\n    }\n    return {\n      client_email: data.default.email\n    };\n  }\n  /**\n   * Automatically obtain a client based on the provided configuration.  If no\n   * options were passed, use Application Default Credentials.\n   */\n  async getClient(options) {\n    if (options) {\n      throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n    }\n    if (!this.cachedCredential) {\n      if (this.jsonContent) {\n        this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n      } else if (this.keyFilename) {\n        const filePath = path.resolve(this.keyFilename);\n        const stream = fs.createReadStream(filePath);\n        await this.fromStreamAsync(stream, this.clientOptions);\n      } else {\n        await this.getApplicationDefaultAsync(this.clientOptions);\n      }\n    }\n    return this.cachedCredential;\n  }\n  /**\n   * Creates a client which will fetch an ID token for authorization.\n   * @param targetAudience the audience for the fetched ID token.\n   * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n   */\n  async getIdTokenClient(targetAudience) {\n    const client = await this.getClient();\n    if (!('fetchIdToken' in client)) {\n      throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n    }\n    return new idtokenclient_1.IdTokenClient({\n      targetAudience,\n      idTokenProvider: client\n    });\n  }\n  /**\n   * Automatically obtain application default credentials, and return\n   * an access token for making requests.\n   */\n  async getAccessToken() {\n    const client = await this.getClient();\n    return (await client.getAccessToken()).token;\n  }\n  /**\n   * Obtain the HTTP headers that will provide authorization for a given\n   * request.\n   */\n  async getRequestHeaders(url) {\n    const client = await this.getClient();\n    return client.getRequestHeaders(url);\n  }\n  /**\n   * Obtain credentials for a request, then attach the appropriate headers to\n   * the request options.\n   * @param opts Axios or Request options on which to attach the headers\n   */\n  async authorizeRequest(opts) {\n    opts = opts || {};\n    const url = opts.url || opts.uri;\n    const client = await this.getClient();\n    const headers = await client.getRequestHeaders(url);\n    opts.headers = Object.assign(opts.headers || {}, headers);\n    return opts;\n  }\n  /**\n   * Automatically obtain application default credentials, and make an\n   * HTTP request using the given options.\n   * @param opts Axios request options for the HTTP request.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(opts) {\n    const client = await this.getClient();\n    return client.request(opts);\n  }\n  /**\n   * Determine the compute environment in which the code is running.\n   */\n  getEnv() {\n    return envDetect_1.getEnv();\n  }\n  /**\n   * Sign the given data with the current private key, or go out\n   * to the IAM API to sign it.\n   * @param data The data to be signed.\n   */\n  async sign(data) {\n    const client = await this.getClient();\n    const crypto = crypto_1.createCrypto();\n    if (client instanceof jwtclient_1.JWT && client.key) {\n      const sign = await crypto.sign(client.key, data);\n      return sign;\n    }\n    const projectId = await this.getProjectId();\n    if (!projectId) {\n      throw new Error('Cannot sign data without a project ID.');\n    }\n    const creds = await this.getCredentials();\n    if (!creds.client_email) {\n      throw new Error('Cannot sign data without `client_email`.');\n    }\n    const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${creds.client_email}:signBlob`;\n    const res = await this.request({\n      method: 'POST',\n      url,\n      data: {\n        payload: crypto.encodeBase64StringUtf8(data)\n      }\n    });\n    return res.data.signedBlob;\n  }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":{"version":3,"names":["Object","defineProperty","exports","value","GoogleAuth","CLOUD_SDK_CLIENT_ID","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","transporters_1","computeclient_1","idtokenclient_1","envDetect_1","jwtclient_1","refreshclient_1","constructor","opts","checkIsGCE","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","keyFilename","keyFile","scopes","credentials","clientOptions","isGCE","getProjectId","callback","getProjectIdAsync","then","r","Promise","resolve","_getDefaultProjectIdPromise","reject","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","Error","e","getApplicationDefault","optionsOrCallback","options","getApplicationDefaultAsync","credential","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","defaultScopes","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","message","Compute","isAvailable","credentialsPath","process","env","length","_getApplicationCredentialsFromFilePath","location","_isWindows","home","join","existsSync","client","filePath","realpathSync","lstatSync","isFile","err","readStream","createReadStream","fromStream","fromJSON","json","type","UserRefreshClient","_cacheClientFromJSON","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","fromAPIKey","apiKey","sys","platform","substring","toLowerCase","exec","stdout","configuration","properties","core","project","creds","getClient","getCredentials","getCredentialsAsync","client_email","private_key","instance","property","params","recursive","default","email","stream","getIdTokenClient","targetAudience","IdTokenClient","idTokenProvider","getAccessToken","token","getRequestHeaders","url","authorizeRequest","uri","headers","assign","request","getEnv","sign","crypto","createCrypto","key","res","method","payload","encodeBase64StringUtf8","signedBlob","DefaultTransporter"],"sources":["C:/Users/79818/shop1/node_modules/google-auth-library/build/src/auth/googleauth.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst idtokenclient_1 = require(\"./idtokenclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return Promise.resolve(this._cachedProjectId);\n        }\n        // In implicit case, supports three environments. In order of precedence,\n        // the implicit environments are:\n        // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n        // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n        // - Cloud SDK: `gcloud config config-helper --format json`\n        // - GCE project ID from metadata server)\n        if (!this._getDefaultProjectIdPromise) {\n            // TODO: refactor the below code so that it doesn't mix and match\n            // promises and async/await.\n            this._getDefaultProjectIdPromise = new Promise(\n            // eslint-disable-next-line no-async-promise-executor\n            async (resolve, reject) => {\n                try {\n                    const projectId = this.getProductionProjectId() ||\n                        (await this.getFileProjectId()) ||\n                        (await this.getDefaultServiceProjectId()) ||\n                        (await this.getGCEProjectId());\n                    this._cachedProjectId = projectId;\n                    if (!projectId) {\n                        throw new Error('Unable to detect a Project Id in the current environment. \\n' +\n                            'To learn more about authentication and Google APIs, visit: \\n' +\n                            'https://cloud.google.com/docs/authentication/getting-started');\n                    }\n                    resolve(projectId);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        }\n        return this._getDefaultProjectIdPromise;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, just return it.\n        if (this.cachedCredential) {\n            return {\n                credential: this.cachedCredential,\n                projectId: await this.getProjectIdAsync(),\n            };\n        }\n        let credential;\n        let projectId;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.defaultScopes = this.defaultScopes;\n                credential.scopes = this.scopes;\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Look in the well-known credential file location.\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.defaultScopes = this.defaultScopes;\n                credential.scopes = this.scopes;\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Determine if we're running on GCE.\n        let isGCE;\n        try {\n            isGCE = await this._checkIsGCE();\n        }\n        catch (e) {\n            e.message = `Unexpected error determining execution environment: ${e.message}`;\n            throw e;\n        }\n        if (!isGCE) {\n            // We failed to find the default credentials. Bail out with an error.\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n        }\n        // For GCE, just return a default ComputeClient. It will take care of\n        // the rest.\n        options.scopes = this.scopes || this.defaultScopes;\n        this.cachedCredential = new computeclient_1.Compute(options);\n        projectId = await this.getProjectId();\n        return { projectId, credential: this.cachedCredential };\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE = await gcpMetadata.isAvailable();\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n            process.env['google_application_credentials'];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        }\n        catch (e) {\n            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env['APPDATA'];\n        }\n        else {\n            // Linux or Mac\n            const home = process.env['HOME'];\n            if (home) {\n                location = path.join(home, '.config');\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error('The file path is invalid.');\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options) {\n        let client;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\n        }\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            client.defaultScopes = this.defaultScopes;\n        }\n        client.fromJSON(json);\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    _cacheClientFromJSON(json, options) {\n        let client;\n        // create either a UserRefreshClient or JWT client.\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            client.defaultScopes = this.defaultScopes;\n        }\n        client.fromJSON(json);\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return this.cachedCredential;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    try {\n                        const data = JSON.parse(s);\n                        const r = this._cacheClientFromJSON(data, options);\n                        return resolve(r);\n                    }\n                    catch (err) {\n                        // If we failed parsing this.keyFileName, assume that it\n                        // is a PEM or p12 certificate:\n                        if (!this.keyFilename)\n                            throw err;\n                        const client = new jwtclient_1.JWT({\n                            ...this.clientOptions,\n                            keyFile: this.keyFilename,\n                        });\n                        this.cachedCredential = client;\n                        return resolve(client);\n                    }\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    async getDefaultServiceProjectId() {\n        return new Promise(resolve => {\n            child_process_1.exec('gcloud config config-helper --format json', (err, stdout) => {\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core\n                            .project;\n                        resolve(projectId);\n                        return;\n                    }\n                    catch (e) {\n                        // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return (process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\n            process.env['gcloud_project'] ||\n            process.env['google_cloud_project']);\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project('project-id');\n            return r;\n        }\n        catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        await this.getClient();\n        if (this.jsonContent) {\n            const credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n            };\n            return credential;\n        }\n        const isGCE = await this._checkIsGCE();\n        if (!isGCE) {\n            throw new Error('Unknown error.');\n        }\n        // For GCE, return the service account details from the metadata server\n        // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n        // The GCF metadata server doesn't respect querystring params if this / is\n        // not included.\n        const data = await gcpMetadata.instance({\n            property: 'service-accounts/',\n            params: { recursive: 'true' },\n        });\n        if (!data || !data.default || !data.default.email) {\n            throw new Error('Failure from metadata server.');\n        }\n        return { client_email: data.default.email };\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n    async getClient(options) {\n        if (options) {\n            throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n        }\n        if (!this.cachedCredential) {\n            if (this.jsonContent) {\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n            }\n            else if (this.keyFilename) {\n                const filePath = path.resolve(this.keyFilename);\n                const stream = fs.createReadStream(filePath);\n                await this.fromStreamAsync(stream, this.clientOptions);\n            }\n            else {\n                await this.getApplicationDefaultAsync(this.clientOptions);\n            }\n        }\n        return this.cachedCredential;\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n    async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!('fetchIdToken' in client)) {\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n        }\n        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    async sign(data) {\n        const client = await this.getClient();\n        const crypto = crypto_1.createCrypto();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const projectId = await this.getProjectId();\n        if (!projectId) {\n            throw new Error('Cannot sign data without a project ID.');\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error('Cannot sign data without `client_email`.');\n        }\n        const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${creds.client_email}:signBlob`;\n        const res = await this.request({\n            method: 'POST',\n            url,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data),\n            },\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceMappingURL=googleauth.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}