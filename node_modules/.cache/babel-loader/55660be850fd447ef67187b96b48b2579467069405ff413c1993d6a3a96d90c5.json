{"ast":null,"code":"\"use strict\";\n\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    const opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    super({\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n      forceRefreshOnFailure: opts.forceRefreshOnFailure\n    });\n    this.email = opts.email;\n    this.keyFile = opts.keyFile;\n    this.key = opts.key;\n    this.keyId = opts.keyId;\n    this.scopes = opts.scopes;\n    this.subject = opts.subject;\n    this.additionalClaims = opts.additionalClaims;\n    this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n  createScoped(scopes) {\n    return new JWT({\n      email: this.email,\n      keyFile: this.keyFile,\n      key: this.key,\n      keyId: this.keyId,\n      scopes,\n      subject: this.subject,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\n   * Obtains the metadata to be sent with the request.\n   *\n   * @param url the URI being authorized.\n   */\n  async getRequestMetadataAsync(url) {\n    if (!this.apiKey && !this.hasUserScopes() && url) {\n      if (this.additionalClaims && this.additionalClaims.target_audience) {\n        const {\n          tokens\n        } = await this.refreshToken();\n        return {\n          headers: this.addSharedMetadataHeaders({\n            Authorization: `Bearer ${tokens.id_token}`\n          })\n        };\n      } else {\n        // no scopes have been set, but a uri has been provided. Use JWTAccess\n        // credentials.\n        if (!this.access) {\n          this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n        }\n        const headers = await this.access.getRequestHeaders(url, this.additionalClaims);\n        return {\n          headers: this.addSharedMetadataHeaders(headers)\n        };\n      }\n    } else if (this.hasAnyScopes() || this.apiKey) {\n      return super.getRequestMetadataAsync(url);\n    } else {\n      // If no audience, apiKey, or scopes are provided, we should not attempt\n      // to populate any headers:\n      return {\n        headers: {}\n      };\n    }\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n  async fetchIdToken(targetAudience) {\n    // Create a new gToken for fetching an ID token\n    const gtoken = new gtoken_1.GoogleToken({\n      iss: this.email,\n      sub: this.subject,\n      scope: this.scopes || this.defaultScopes,\n      keyFile: this.keyFile,\n      key: this.key,\n      additionalClaims: {\n        target_audience: targetAudience\n      }\n    });\n    await gtoken.getToken({\n      forceRefresh: true\n    });\n    if (!gtoken.idToken) {\n      throw new Error('Unknown error: Failed to fetch ID token');\n    }\n    return gtoken.idToken;\n  }\n  /**\n   * Determine if there are currently scopes available.\n   */\n  hasUserScopes() {\n    if (!this.scopes) {\n      return false;\n    }\n    return this.scopes.length > 0;\n  }\n  /**\n   * Are there any default or user scopes defined.\n   */\n  hasAnyScopes() {\n    if (this.scopes && this.scopes.length > 0) return true;\n    if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n    return false;\n  }\n  authorize(callback) {\n    if (callback) {\n      this.authorizeAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.authorizeAsync();\n    }\n  }\n  async authorizeAsync() {\n    const result = await this.refreshToken();\n    if (!result) {\n      throw new Error('No result returned');\n    }\n    this.credentials = result.tokens;\n    this.credentials.refresh_token = 'jwt-placeholder';\n    this.key = this.gtoken.key;\n    this.email = this.gtoken.iss;\n    return result.tokens;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken ignored\n   * @private\n   */\n  async refreshTokenNoCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    const gtoken = this.createGToken();\n    const token = await gtoken.getToken({\n      forceRefresh: this.isTokenExpiring()\n    });\n    const tokens = {\n      access_token: token.access_token,\n      token_type: 'Bearer',\n      expiry_date: gtoken.expiresAt,\n      id_token: gtoken.idToken\n    };\n    this.emit('tokens', tokens);\n    return {\n      res: null,\n      tokens\n    };\n  }\n  /**\n   * Create a gToken if it doesn't already exist.\n   */\n  createGToken() {\n    if (!this.gtoken) {\n      this.gtoken = new gtoken_1.GoogleToken({\n        iss: this.email,\n        sub: this.subject,\n        scope: this.scopes || this.defaultScopes,\n        keyFile: this.keyFile,\n        key: this.key,\n        additionalClaims: this.additionalClaims\n      });\n    }\n    return this.gtoken;\n  }\n  /**\n   * Create a JWT credentials instance using the given input options.\n   * @param json The input object.\n   */\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    }\n    // Extract the relevant information from the json key file.\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n    this.quotaProjectId = json.quota_project_id;\n  }\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the service account auth settings.');\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\n   * Creates a JWT credentials instance using an API Key for authentication.\n   * @param apiKey The API Key in string form.\n   */\n  fromAPIKey(apiKey) {\n    if (typeof apiKey !== 'string') {\n      throw new Error('Must provide an API Key string.');\n    }\n    this.apiKey = apiKey;\n  }\n  /**\n   * Using the key or keyFile on the JWT client, obtain an object that contains\n   * the key and the client email.\n   */\n  async getCredentials() {\n    if (this.key) {\n      return {\n        private_key: this.key,\n        client_email: this.email\n      };\n    } else if (this.keyFile) {\n      const gtoken = this.createGToken();\n      const creds = await gtoken.getCredentials(this.keyFile);\n      return {\n        private_key: creds.privateKey,\n        client_email: creds.clientEmail\n      };\n    }\n    throw new Error('A key or a keyFile must be provided to getCredentials.');\n  }\n}\nexports.JWT = JWT;","map":{"version":3,"names":["Object","defineProperty","exports","value","JWT","gtoken_1","require","jwtaccess_1","oauth2client_1","OAuth2Client","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","forceRefreshOnFailure","additionalClaims","credentials","refresh_token","expiry_date","createScoped","getRequestMetadataAsync","url","apiKey","hasUserScopes","target_audience","tokens","refreshToken","headers","addSharedMetadataHeaders","Authorization","id_token","access","JWTAccess","getRequestHeaders","hasAnyScopes","fetchIdToken","targetAudience","gtoken","GoogleToken","iss","sub","scope","defaultScopes","getToken","forceRefresh","idToken","Error","length","authorize","callback","authorizeAsync","then","r","result","refreshTokenNoCache","createGToken","token","isTokenExpiring","access_token","token_type","expiresAt","emit","res","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","quotaProjectId","quota_project_id","fromStream","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","e","fromAPIKey","getCredentials","creds","privateKey","clientEmail"],"sources":["C:/Users/79818/shop1/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\n            ? optionsOrEmail\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super({\n            eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n            forceRefreshOnFailure: opts.forceRefreshOnFailure,\n        });\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        return new JWT({\n            email: this.email,\n            keyFile: this.keyFile,\n            key: this.key,\n            keyId: this.keyId,\n            scopes,\n            subject: this.subject,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    async getRequestMetadataAsync(url) {\n        if (!this.apiKey && !this.hasUserScopes() && url) {\n            if (this.additionalClaims &&\n                this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`,\n                    }),\n                };\n            }\n            else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n                const headers = await this.access.getRequestHeaders(url, this.additionalClaims);\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        else if (this.hasAnyScopes() || this.apiKey) {\n            return super.getRequestMetadataAsync(url);\n        }\n        else {\n            // If no audience, apiKey, or scopes are provided, we should not attempt\n            // to populate any headers:\n            return { headers: {} };\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes || this.defaultScopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: { target_audience: targetAudience },\n        });\n        await gtoken.getToken({\n            forceRefresh: true,\n        });\n        if (!gtoken.idToken) {\n            throw new Error('Unknown error: Failed to fetch ID token');\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasUserScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */\n    hasAnyScopes() {\n        if (this.scopes && this.scopes.length > 0)\n            return true;\n        if (this.defaultScopes && this.defaultScopes.length > 0)\n            return true;\n        return false;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error('No result returned');\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = 'jwt-placeholder';\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring(),\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: 'Bearer',\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken,\n        };\n        this.emit('tokens', tokens);\n        return { res: null, tokens };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    async getCredentials() {\n        if (this.key) {\n            return { private_key: this.key, client_email: this.email };\n        }\n        else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\n        }\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\n    }\n}\nexports.JWT = JWT;\n//# sourceMappingURL=jwtclient.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}