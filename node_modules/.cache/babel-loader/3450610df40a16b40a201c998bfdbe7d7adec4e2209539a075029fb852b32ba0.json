{"ast":null,"code":"const _ = require('lodash');\nconst {\n  JWT\n} = require('google-auth-library');\nconst Axios = require('axios');\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\nconst {\n  getFieldMask\n} = require('./utils');\nconst GOOGLE_AUTH_SCOPES = ['https://www.googleapis.com/auth/spreadsheets'\n\n// the list from the sheets v4 auth for spreadsheets.get\n// 'https://www.googleapis.com/auth/drive',\n// 'https://www.googleapis.com/auth/drive.readonly',\n// 'https://www.googleapis.com/auth/drive.file',\n// 'https://www.googleapis.com/auth/spreadsheets',\n// 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH'\n};\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n    this._spreadsheetUrl = null;\n\n    // create an axios instance with sheet root URL and interceptors to handle auth\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId || ''}`,\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n        _.keys(params).forEach(key => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && params[key].length >= 0;\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], val => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n        return options ? options.slice(0, -1) : options;\n      }\n    });\n    // have to use bind here or the functions dont have access to `this` :(\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(this._handleAxiosResponse.bind(this), this._handleAxiosErrors.bind(this));\n    return this;\n  }\n\n  // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n  async createNewSpreadsheetDocument(properties) {\n    // see updateProperties for more info about available properties\n\n    if (this.spreadsheetId) {\n      throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n    }\n    const response = await this.axios.post(this.url, {\n      properties\n    });\n    this.spreadsheetId = response.data.spreadsheetId;\n    this.axios.defaults.baseURL += this.spreadsheetId;\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, s => this._updateOrCreateSheet(s));\n  }\n\n  // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  }\n\n  // token must be created and managed (refreshed) elsewhere\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n  async useOAuth2Client(oAuth2Client) {\n    this.authMode = AUTH_MODES.OAUTH;\n    this.oAuth2Client = oAuth2Client;\n  }\n\n  // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n  async useServiceAccountAuth(creds) {\n    let impersonateAs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs\n    });\n    await this.renewJwtAuth();\n  }\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  }\n\n  // TODO: provide mechanism to share single JWT auth between docs?\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly');\n      // this seems to do the right thing and only renew the token if expired\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else if (this.authMode === AUTH_MODES.OAUTH) {\n      const credentials = await this.oAuth2Client.getAccessToken();\n      config.headers.Authorization = `Bearer ${credentials.token}`;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n    return config;\n  }\n  async _handleAxiosResponse(response) {\n    return response;\n  }\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n      const {\n        code,\n        message\n      } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n    throw error;\n  }\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{\n        [requestType]: requestParams\n      }],\n      includeSpreadsheetInResponse: true\n      // responseRanges: [string]\n      // responseIncludeGridData: true\n    });\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, s => this._updateOrCreateSheet(s));\n    // console.log('API RESPONSE', response.data.replies[0][requestType]);\n    return response.data.replies[0][requestType];\n  }\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...(responseRanges && {\n        responseIncludeGridData: true,\n        ...(responseRanges !== '*' && {\n          responseRanges\n        })\n      })\n    });\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, s => this._updateOrCreateSheet(s));\n  }\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n  }\n  _updateRawProperties(newProperties) {\n    this._rawProperties = newProperties;\n  }\n  _updateOrCreateSheet(_ref) {\n    let {\n      properties,\n      data\n    } = _ref;\n    const {\n      sheetId\n    } = properties;\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, {\n        properties,\n        data\n      });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  }\n\n  // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n  get title() {\n    return this._getProp('title');\n  }\n  get locale() {\n    return this._getProp('locale');\n  }\n  get timeZone() {\n    return this._getProp('timeZone');\n  }\n  get autoRecalc() {\n    return this._getProp('autoRecalc');\n  }\n  get defaultFormat() {\n    return this._getProp('defaultFormat');\n  }\n  get spreadsheetTheme() {\n    return this._getProp('spreadsheetTheme');\n  }\n  get iterativeCalculationSettings() {\n    return this._getProp('iterativeCalculationSettings');\n  }\n  set title(newVal) {\n    this._setProp('title', newVal);\n  }\n  set locale(newVal) {\n    this._setProp('locale', newVal);\n  }\n  set timeZone(newVal) {\n    this._setProp('timeZone', newVal);\n  }\n  set autoRecalc(newVal) {\n    this._setProp('autoRecalc', newVal);\n  }\n  set defaultFormat(newVal) {\n    this._setProp('defaultFormat', newVal);\n  }\n  set spreadsheetTheme(newVal) {\n    this._setProp('spreadsheetTheme', newVal);\n  }\n  set iterativeCalculationSettings(newVal) {\n    this._setProp('iterativeCalculationSettings', newVal);\n  }\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties)\n    });\n  }\n\n  // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: {\n        ...(includeCells && {\n          includeGridData: true\n        })\n      }\n    });\n    this._spreadsheetUrl = response.data.spreadsheetUrl;\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, s => this._updateOrCreateSheet(s));\n  }\n  async getInfo() {\n    return this.loadInfo();\n  } // alias to mimic old version\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  }\n\n  // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n  get sheetCount() {\n    this._ensureInfoLoaded();\n    return _.values(this._rawSheets).length;\n  }\n  get sheetsById() {\n    this._ensureInfoLoaded();\n    return this._rawSheets;\n  }\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n    return _.sortBy(this._rawSheets, 'index');\n  }\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n    return _.keyBy(this._rawSheets, 'title');\n  }\n  async addSheet() {\n    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues', 'headerRowIndex')\n    });\n    // _makeSingleUpdateRequest already adds the sheet\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId];\n\n    // allow it to work with `.headers` but `.headerValues` is the real prop\n    const headers = properties.headerValues || properties.headers;\n    if (headers) {\n      await newSheet.setHeaderRow(headers, properties.headerRowIndex);\n    }\n    return newSheet;\n  }\n  async addWorksheet(properties) {\n    return this.addSheet(properties);\n  } // alias to mimic old version\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', {\n      sheetId\n    });\n    delete this._rawSheets[sheetId];\n  }\n\n  // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId\n    });\n  }\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', {\n      namedRangeId\n    });\n  }\n\n  // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n    const dataFilters = _.map(filtersArray, filter => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : {\n          a1Range: filter\n        };\n      }\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        }\n        // TODO: make this support Developer Metadata filters\n        return {\n          gridRange: filter\n        };\n      }\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n    let result;\n    // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters\n        }\n      });\n      // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters\n      });\n    }\n    const {\n      sheets\n    } = result.data;\n    _.each(sheets, sheet => {\n      this._updateOrCreateSheet(sheet);\n    });\n  }\n\n  // EXPORTING /////////////////////////////////////////////////////////////\n  async _downloadAs(fileType, worksheetId, returnStreamInsteadOfBuffer) {\n    // see https://stackoverflow.com/questions/11619805/using-the-google-drive-api-to-download-a-spreadsheet-in-csv-format/51235960#51235960\n\n    if (['html', 'xlsx', 'ods'].includes(fileType)) {\n      if (worksheetId) throw new Error(`Cannot specify worksheetId when exporting as ${fileType}`);\n    } else if (['csv', 'tsv', 'pdf'].includes(fileType)) {\n      if (worksheetId === undefined) throw new Error(`Must specify worksheetId when exporting as ${fileType}`);\n    } else {\n      throw new Error(`unsupported export fileType - ${fileType}`);\n    }\n\n    // google UI shows \"html\" but passes through \"zip\"\n    if (fileType === 'html') fileType = 'zip';\n    const exportUrl = this._spreadsheetUrl.replace('/edit', '/export');\n    const response = await this.axios.get(exportUrl, {\n      baseUrl: '',\n      // unset baseUrl since we're not hitting the normal sheets API\n      params: {\n        id: this.spreadsheetId,\n        format: fileType,\n        ...(worksheetId && {\n          gid: worksheetId\n        })\n      },\n      responseType: returnStreamInsteadOfBuffer ? 'stream' : 'arraybuffer'\n    });\n    return response.data;\n  }\n  async downloadAsHTML() {\n    let returnStreamInsteadOfBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._downloadAs('html', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsXLSX() {\n    let returnStreamInsteadOfBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._downloadAs('xlsx', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsODS() {\n    let returnStreamInsteadOfBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._downloadAs('ods', null, returnStreamInsteadOfBuffer);\n  }\n}\nmodule.exports = GoogleSpreadsheet;","map":{"version":3,"names":["_","require","JWT","Axios","GoogleSpreadsheetWorksheet","getFieldMask","GOOGLE_AUTH_SCOPES","AUTH_MODES","API_KEY","RAW_ACCESS_TOKEN","OAUTH","GoogleSpreadsheet","constructor","sheetId","spreadsheetId","authMode","_rawSheets","_rawProperties","_spreadsheetUrl","axios","create","baseURL","paramsSerializer","params","options","keys","forEach","key","isParamTypeObject","isParamTypeArray","length","encodeURIComponent","each","val","slice","interceptors","request","use","_setAxiosRequestAuth","bind","response","_handleAxiosResponse","_handleAxiosErrors","createNewSpreadsheetDocument","properties","Error","post","url","data","defaults","sheets","s","_updateOrCreateSheet","useApiKey","apiKey","useRawAccessToken","token","accessToken","useOAuth2Client","oAuth2Client","useServiceAccountAuth","creds","impersonateAs","arguments","undefined","jwtClient","email","client_email","private_key","scopes","subject","renewJwtAuth","authorize","config","headers","Authorization","credentials","access_token","getAccessToken","error","code","message","get","_makeSingleUpdateRequest","requestType","requestParams","requests","includeSpreadsheetInResponse","_updateRawProperties","updatedSpreadsheet","replies","_makeBatchUpdateRequest","responseRanges","responseIncludeGridData","_ensureInfoLoaded","newProperties","_ref","_fillCellData","_getProp","param","_setProp","newVal","title","locale","timeZone","autoRecalc","defaultFormat","spreadsheetTheme","iterativeCalculationSettings","updateProperties","fields","loadInfo","includeCells","includeGridData","spreadsheetUrl","getInfo","resetLocalCache","sheetCount","values","sheetsById","sheetsByIndex","sortBy","sheetsByTitle","keyBy","addSheet","omit","newSheetId","newSheet","headerValues","setHeaderRow","headerRowIndex","addWorksheet","deleteSheet","addNamedRange","name","range","namedRangeId","deleteNamedRange","loadCells","filters","readOnlyMode","filtersArray","isArray","dataFilters","map","filter","isString","a1Range","isObject","gridRange","result","ranges","sheet","_downloadAs","fileType","worksheetId","returnStreamInsteadOfBuffer","includes","exportUrl","replace","baseUrl","id","format","gid","responseType","downloadAsHTML","downloadAsXLSX","downloadAsODS","module","exports"],"sources":["C:/Users/79818/shop1/node_modules/google-spreadsheet/lib/GoogleSpreadsheet.js"],"sourcesContent":["const _ = require('lodash');\nconst { JWT } = require('google-auth-library');\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\nconst { getFieldMask } = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = [\n  'https://www.googleapis.com/auth/spreadsheets',\n\n  // the list from the sheets v4 auth for spreadsheets.get\n  // 'https://www.googleapis.com/auth/drive',\n  // 'https://www.googleapis.com/auth/drive.readonly',\n  // 'https://www.googleapis.com/auth/drive.file',\n  // 'https://www.googleapis.com/auth/spreadsheets',\n  // 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\n\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH',\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n    this._spreadsheetUrl = null;\n\n    // create an axios instance with sheet root URL and interceptors to handle auth\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId || ''}`,\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n        _.keys(params).forEach((key) => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], (val) => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n        return options ? options.slice(0, -1) : options;\n      },\n    });\n    // have to use bind here or the functions dont have access to `this` :(\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(\n      this._handleAxiosResponse.bind(this),\n      this._handleAxiosErrors.bind(this)\n    );\n\n    return this;\n  }\n\n  // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n  async createNewSpreadsheetDocument(properties) {\n    // see updateProperties for more info about available properties\n\n    if (this.spreadsheetId) {\n      throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n    }\n    const response = await this.axios.post(this.url, {\n      properties,\n    });\n    this.spreadsheetId = response.data.spreadsheetId;\n    this.axios.defaults.baseURL += this.spreadsheetId;\n\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  }\n\n  // token must be created and managed (refreshed) elsewhere\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n\n  async useOAuth2Client(oAuth2Client) {\n    this.authMode = AUTH_MODES.OAUTH;\n    this.oAuth2Client = oAuth2Client;\n  }\n\n  // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n  async useServiceAccountAuth(creds, impersonateAs = null) {\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs,\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  }\n\n  // TODO: provide mechanism to share single JWT auth between docs?\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly');\n      // this seems to do the right thing and only renew the token if expired\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else if (this.authMode === AUTH_MODES.OAUTH) {\n      const credentials = await this.oAuth2Client.getAccessToken();\n      config.headers.Authorization = `Bearer ${credentials.token}`;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n    return config;\n  }\n\n  async _handleAxiosResponse(response) { return response; }\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n\n      const { code, message } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{ [requestType]: requestParams }],\n      includeSpreadsheetInResponse: true,\n      // responseRanges: [string]\n      // responseIncludeGridData: true\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n    // console.log('API RESPONSE', response.data.replies[0][requestType]);\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...responseRanges && {\n        responseIncludeGridData: true,\n        ...responseRanges !== '*' && { responseRanges },\n      },\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) { this._rawProperties = newProperties; }\n\n  _updateOrCreateSheet({ properties, data }) {\n    const { sheetId } = properties;\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, { properties, data });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  }\n\n  // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() { return this._getProp('title'); }\n  get locale() { return this._getProp('locale'); }\n  get timeZone() { return this._getProp('timeZone'); }\n  get autoRecalc() { return this._getProp('autoRecalc'); }\n  get defaultFormat() { return this._getProp('defaultFormat'); }\n  get spreadsheetTheme() { return this._getProp('spreadsheetTheme'); }\n  get iterativeCalculationSettings() { return this._getProp('iterativeCalculationSettings'); }\n\n  set title(newVal) { this._setProp('title', newVal); }\n  set locale(newVal) { this._setProp('locale', newVal); }\n  set timeZone(newVal) { this._setProp('timeZone', newVal); }\n  set autoRecalc(newVal) { this._setProp('autoRecalc', newVal); }\n  set defaultFormat(newVal) { this._setProp('defaultFormat', newVal); }\n  set spreadsheetTheme(newVal) { this._setProp('spreadsheetTheme', newVal); }\n  set iterativeCalculationSettings(newVal) { this._setProp('iterativeCalculationSettings', newVal); }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: {\n        ...includeCells && { includeGridData: true },\n      },\n    });\n    this._spreadsheetUrl = response.data.spreadsheetUrl;\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n  async getInfo() { return this.loadInfo(); } // alias to mimic old version\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  }\n\n  // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n  get sheetCount() {\n    this._ensureInfoLoaded();\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet(properties = {}) {\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues', 'headerRowIndex'),\n    });\n    // _makeSingleUpdateRequest already adds the sheet\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId];\n\n    // allow it to work with `.headers` but `.headerValues` is the real prop\n    const headers = properties.headerValues || properties.headers;\n    if (headers) {\n      await newSheet.setHeaderRow(headers, properties.headerRowIndex);\n    }\n\n    return newSheet;\n  }\n  async addWorksheet(properties) { return this.addSheet(properties); } // alias to mimic old version\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', { sheetId });\n    delete this._rawSheets[sheetId];\n  }\n\n  // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId,\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', { namedRangeId });\n  }\n\n  // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n    const dataFilters = _.map(filtersArray, (filter) => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : { a1Range: filter };\n      }\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        }\n        // TODO: make this support Developer Metadata filters\n        return { gridRange: filter };\n      }\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result;\n    // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters,\n        },\n      });\n    // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters,\n      });\n    }\n\n    const { sheets } = result.data;\n    _.each(sheets, (sheet) => { this._updateOrCreateSheet(sheet); });\n  }\n\n  // EXPORTING /////////////////////////////////////////////////////////////\n  async _downloadAs(fileType, worksheetId, returnStreamInsteadOfBuffer) {\n    // see https://stackoverflow.com/questions/11619805/using-the-google-drive-api-to-download-a-spreadsheet-in-csv-format/51235960#51235960\n\n    if (['html', 'xlsx', 'ods'].includes(fileType)) {\n      if (worksheetId) throw new Error(`Cannot specify worksheetId when exporting as ${fileType}`);\n    } else if (['csv', 'tsv', 'pdf'].includes(fileType)) {\n      if (worksheetId === undefined) throw new Error(`Must specify worksheetId when exporting as ${fileType}`);\n    } else {\n      throw new Error(`unsupported export fileType - ${fileType}`);\n    }\n\n    // google UI shows \"html\" but passes through \"zip\"\n    if (fileType === 'html') fileType = 'zip';\n\n    const exportUrl = this._spreadsheetUrl.replace('/edit', '/export');\n    const response = await this.axios.get(exportUrl, {\n      baseUrl: '', // unset baseUrl since we're not hitting the normal sheets API\n      params: {\n        id: this.spreadsheetId,\n        format: fileType,\n        ...worksheetId && { gid: worksheetId },\n      },\n      responseType: returnStreamInsteadOfBuffer ? 'stream' : 'arraybuffer',\n    });\n    return response.data;\n  }\n  async downloadAsHTML(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('html', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsXLSX(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('xlsx', null, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsODS(returnStreamInsteadOfBuffer = false) {\n    return this._downloadAs('ods', null, returnStreamInsteadOfBuffer);\n  }\n}\n\nmodule.exports = GoogleSpreadsheet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}