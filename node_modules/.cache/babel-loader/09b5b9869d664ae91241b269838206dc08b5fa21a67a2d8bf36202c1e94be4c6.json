{"ast":null,"code":"const _ = require('lodash');\nconst GoogleSpreadsheetRow = require('./GoogleSpreadsheetRow');\nconst GoogleSpreadsheetCell = require('./GoogleSpreadsheetCell');\nconst {\n  getFieldMask,\n  columnToLetter,\n  letterToColumn\n} = require('./utils');\nfunction checkForDuplicateHeaders(headers) {\n  // check for duplicate headers\n  const checkForDupes = _.groupBy(headers); // { c1: ['c1'], c2: ['c2', 'c2' ]}\n  _.each(checkForDupes, (grouped, header) => {\n    if (!header) return; // empty columns are skipped, so multiple is ok\n    if (grouped.length > 1) {\n      throw new Error(`Duplicate header detected: \"${header}\". Please make sure all non-empty headers are unique`);\n    }\n  });\n}\nclass GoogleSpreadsheetWorksheet {\n  constructor(parentSpreadsheet, {\n    properties,\n    data\n  }) {\n    this._spreadsheet = parentSpreadsheet; // the parent GoogleSpreadsheet instance\n\n    this._headerRowIndex = 1; // assume \"header row\" (for row-based calls) is in first row\n\n    // basic properties\n    this._rawProperties = properties;\n    this._cells = []; // we will use a 2d sparse array to store cells;\n\n    this._rowMetadata = []; // 1d sparse array\n    this._columnMetadata = [];\n    if (data) this._fillCellData(data);\n    return this;\n  }\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    // pass the call up to the parent\n    return this._spreadsheet._makeSingleUpdateRequest(requestType, {\n      // sheetId: this.sheetId,\n      ...requestParams\n    });\n  }\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) {\n      throw new Error('You must call `doc.loadInfo()` again before accessing this property');\n    }\n  }\n  resetLocalCache(dataOnly) {\n    if (!dataOnly) this._rawProperties = null;\n    this.headerValues = null;\n    this._headerRowIndex = 1;\n    this._cells = [];\n  }\n  _fillCellData(dataRanges) {\n    _.each(dataRanges, range => {\n      const startRow = range.startRow || 0;\n      const startColumn = range.startColumn || 0;\n      const numRows = range.rowMetadata.length;\n      const numColumns = range.columnMetadata.length;\n\n      // update cell data for entire range\n      for (let i = 0; i < numRows; i++) {\n        const actualRow = startRow + i;\n        for (let j = 0; j < numColumns; j++) {\n          const actualColumn = startColumn + j;\n\n          // if the row has not been initialized yet, do it\n          if (!this._cells[actualRow]) this._cells[actualRow] = [];\n\n          // see if the response includes some info for the cell\n          const cellData = _.get(range, `rowData[${i}].values[${j}]`);\n\n          // update the cell object or create it\n          if (this._cells[actualRow][actualColumn]) {\n            this._cells[actualRow][actualColumn]._updateRawData(cellData);\n          } else {\n            this._cells[actualRow][actualColumn] = new GoogleSpreadsheetCell(this, actualRow, actualColumn, cellData);\n          }\n        }\n      }\n\n      // update row metadata\n      for (let i = 0; i < range.rowMetadata.length; i++) {\n        this._rowMetadata[startRow + i] = range.rowMetadata[i];\n      }\n      // update column metadata\n      for (let i = 0; i < range.columnMetadata.length; i++) {\n        this._columnMetadata[startColumn + i] = range.columnMetadata[i];\n      }\n    });\n  }\n\n  // PROPERTY GETTERS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n  get sheetId() {\n    return this._getProp('sheetId');\n  }\n  get title() {\n    return this._getProp('title');\n  }\n  get index() {\n    return this._getProp('index');\n  }\n  get sheetType() {\n    return this._getProp('sheetType');\n  }\n  get gridProperties() {\n    return this._getProp('gridProperties');\n  }\n  get hidden() {\n    return this._getProp('hidden');\n  }\n  get tabColor() {\n    return this._getProp('tabColor');\n  }\n  get rightToLeft() {\n    return this._getProp('rightToLeft');\n  }\n  set sheetId(newVal) {\n    return this._setProp('sheetId', newVal);\n  }\n  set title(newVal) {\n    return this._setProp('title', newVal);\n  }\n  set index(newVal) {\n    return this._setProp('index', newVal);\n  }\n  set sheetType(newVal) {\n    return this._setProp('sheetType', newVal);\n  }\n  set gridProperties(newVal) {\n    return this._setProp('gridProperties', newVal);\n  }\n  set hidden(newVal) {\n    return this._setProp('hidden', newVal);\n  }\n  set tabColor(newVal) {\n    return this._setProp('tabColor', newVal);\n  }\n  set rightToLeft(newVal) {\n    return this._setProp('rightToLeft', newVal);\n  }\n  get rowCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.rowCount;\n  }\n  get columnCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.columnCount;\n  }\n  get colCount() {\n    throw new Error('`colCount` is deprecated - please use `columnCount` instead.');\n  }\n  set rowCount(newVal) {\n    throw new Error('Do not update directly. Use resize()');\n  }\n  set columnCount(newVal) {\n    throw new Error('Do not update directly. Use resize()');\n  }\n  get a1SheetName() {\n    return `'${this.title.replace(/'/g, \"''\")}'`;\n  }\n  get encodedA1SheetName() {\n    return encodeURIComponent(this.a1SheetName);\n  }\n  get lastColumnLetter() {\n    return columnToLetter(this.columnCount);\n  }\n\n  // CELLS-BASED INTERACTIONS //////////////////////////////////////////////////////////////////////\n\n  get cellStats() {\n    let allCells = _.flatten(this._cells);\n    allCells = _.compact(allCells);\n    return {\n      nonEmpty: _.filter(allCells, c => c.value).length,\n      loaded: allCells.length,\n      total: this.rowCount * this.columnCount\n    };\n  }\n  getCellByA1(a1Address) {\n    const split = a1Address.match(/([A-Z]+)([0-9]+)/);\n    const columnIndex = letterToColumn(split[1]);\n    const rowIndex = parseInt(split[2]);\n    return this.getCell(rowIndex - 1, columnIndex - 1);\n  }\n  getCell(rowIndex, columnIndex) {\n    if (rowIndex < 0 || columnIndex < 0) throw new Error('Min coordinate is 0, 0');\n    if (rowIndex >= this.rowCount || columnIndex >= this.columnCount) {\n      throw new Error(`Out of bounds, sheet is ${this.rowCount} by ${this.columnCount}`);\n    }\n    if (!_.get(this._cells, `[${rowIndex}][${columnIndex}]`)) {\n      throw new Error('This cell has not been loaded yet');\n    }\n    return this._cells[rowIndex][columnIndex];\n  }\n  async loadCells(sheetFilters) {\n    // load the whole sheet\n    if (!sheetFilters) return this._spreadsheet.loadCells(this.a1SheetName);\n    let filtersArray = _.isArray(sheetFilters) ? sheetFilters : [sheetFilters];\n    filtersArray = _.map(filtersArray, filter => {\n      // add sheet name to A1 ranges\n      if (_.isString(filter)) {\n        if (filter.startsWith(this.a1SheetName)) return filter;\n        return `${this.a1SheetName}!${filter}`;\n      }\n      if (_.isObject(filter)) {\n        // TODO: detect and support DeveloperMetadata filters\n        if (!filter.sheetId) {\n          return {\n            sheetId: this.sheetId,\n            ...filter\n          };\n        }\n        if (filter.sheetId !== this.sheetId) {\n          throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n        } else {\n          return filter;\n        }\n      } else {\n        throw new Error('Each filter must be a A1 range string or gridrange object');\n      }\n    });\n    return this._spreadsheet.loadCells(filtersArray);\n  }\n  async saveUpdatedCells() {\n    const cellsToSave = _.filter(_.flatten(this._cells), {\n      _isDirty: true\n    });\n    if (cellsToSave.length) {\n      await this.saveCells(cellsToSave);\n    }\n    // TODO: do we want to return stats? or the cells that got updated?\n  }\n  async saveCells(cellsToUpdate) {\n    // we send an individual \"updateCells\" request for each cell\n    // because the fields that are udpated for each group are the same\n    // and we dont want to accidentally overwrite something\n    const requests = _.map(cellsToUpdate, cell => cell._getUpdateRequest());\n    const responseRanges = _.map(cellsToUpdate, c => `${this.a1SheetName}!${c.a1Address}`);\n\n    // if nothing is being updated the request returned is just `null`\n    // so we make sure at least 1 request is valid - otherwise google throws a 400\n    if (!_.compact(requests).length) {\n      throw new Error('At least one cell must have something to update');\n    }\n    await this._spreadsheet._makeBatchUpdateRequest(requests, responseRanges);\n  }\n\n  // SAVING THIS FOR FUTURE USE\n  // puts the cells that need updating into batches\n  // async updateCellsByBatches() {\n  //   // saving this code, but it's problematic because each group must have the same update fields\n  //   const cellsByRow = _.groupBy(cellsToUpdate, 'rowIndex');\n  //   const groupsToSave = [];\n  //   _.each(cellsByRow, (cells, rowIndex) => {\n  //     let cellGroup = [];\n  //     _.each(cells, (c) => {\n  //       if (!cellGroup.length) {\n  //         cellGroup.push(c);\n  //       } else if (\n  //         cellGroup[cellGroup.length - 1].columnIndex ===\n  //         c.columnIndex - 1\n  //       ) {\n  //         cellGroup.push(c);\n  //       } else {\n  //         groupsToSave.push(cellGroup);\n  //         cellGroup = [];\n  //       }\n  //     });\n  //     groupsToSave.push(cellGroup);\n  //   });\n  //   const requests = _.map(groupsToSave, (cellGroup) => ({\n  //     updateCells: {\n  //       rows: [\n  //         {\n  //           values: _.map(cellGroup, (cell) => ({\n  //             ...cell._draftData.value && {\n  //               userEnteredValue: { [cell._draftData.valueType]: cell._draftData.value },\n  //             },\n  //             ...cell._draftData.note !== undefined && {\n  //               note: cell._draftData.note ,\n  //             },\n  //             ...cell._draftData.userEnteredFormat && {\n  //               userEnteredValue: cell._draftData.userEnteredFormat,\n  //             },\n  //           })),\n  //         },\n  //       ],\n  //       fields: 'userEnteredValue,note,userEnteredFormat',\n  //       start: {\n  //         sheetId: this.sheetId,\n  //         rowIndex: cellGroup[0].rowIndex,\n  //         columnIndex: cellGroup[0].columnIndex,\n  //       },\n  //     },\n  //   }));\n  //   const responseRanges = _.map(groupsToSave, (cellGroup) => {\n  //     let a1Range = cellGroup[0].a1Address;\n  //     if (cellGroup.length > 1)\n  //       a1Range += `:${cellGroup[cellGroup.length - 1].a1Address}`;\n  //     return `${cellGroup[0]._sheet.a1SheetName}!${a1Range}`;\n  //   });\n  // }\n\n  // ROW BASED FUNCTIONS ///////////////////////////////////////////////////////////////////////////\n\n  async loadHeaderRow(headerRowIndex) {\n    if (headerRowIndex !== undefined) this._headerRowIndex = headerRowIndex;\n    const rows = await this.getCellsInRange(`A${this._headerRowIndex}:${this.lastColumnLetter}${this._headerRowIndex}`);\n    if (!rows) {\n      throw new Error('No values in the header row - fill the first row with header values before trying to interact with rows');\n    }\n    this.headerValues = _.map(rows[0], header => header.trim());\n    if (!_.compact(this.headerValues).length) {\n      throw new Error('All your header cells are blank - fill the first row with header values before trying to interact with rows');\n    }\n    checkForDuplicateHeaders(this.headerValues);\n  }\n  async setHeaderRow(headerValues, headerRowIndex) {\n    if (!headerValues) return;\n    if (headerValues.length > this.columnCount) {\n      throw new Error(`Sheet is not large enough to fit ${headerValues.length} columns. Resize the sheet first.`);\n    }\n    const trimmedHeaderValues = _.map(headerValues, h => h.trim());\n    checkForDuplicateHeaders(trimmedHeaderValues);\n    if (!_.compact(trimmedHeaderValues).length) {\n      throw new Error('All your header cells are blank -');\n    }\n    if (headerRowIndex) this._headerRowIndex = headerRowIndex;\n    const response = await this._spreadsheet.axios.request({\n      method: 'put',\n      url: `/values/${this.encodedA1SheetName}!${this._headerRowIndex}:${this._headerRowIndex}`,\n      params: {\n        valueInputOption: 'USER_ENTERED',\n        // other option is RAW\n        includeValuesInResponse: true\n      },\n      data: {\n        range: `${this.a1SheetName}!${this._headerRowIndex}:${this._headerRowIndex}`,\n        majorDimension: 'ROWS',\n        values: [[...trimmedHeaderValues,\n        // pad the rest of the row with empty values to clear them all out\n        ..._.times(this.columnCount - trimmedHeaderValues.length, () => '')]]\n      }\n    });\n    this.headerValues = response.data.updatedData.values[0];\n  }\n  async addRows(rows, options = {}) {\n    // adds multiple rows in one API interaction using the append endpoint\n\n    // each row can be an array or object\n    // an array is just cells\n    // ex: ['column 1', 'column 2', 'column 3']\n    // an object must use the header row values as keys\n    // ex: { col1: 'column 1', col2: 'column 2', col3: 'column 3' }\n\n    // google bug that does not handle colons in names\n    // see https://issuetracker.google.com/issues/150373119\n    if (this.title.includes(':')) {\n      throw new Error('Please remove the \":\" from your sheet title. There is a bug with the google API which breaks appending rows if any colons are in the sheet title.');\n    }\n    if (!_.isArray(rows)) throw new Error('You must pass in an array of row values to append');\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    // convert each row into an array of cell values rather than the key/value object\n    const rowsAsArrays = [];\n    _.each(rows, row => {\n      let rowAsArray;\n      if (_.isArray(row)) {\n        rowAsArray = row;\n      } else if (_.isObject(row)) {\n        rowAsArray = [];\n        for (let i = 0; i < this.headerValues.length; i++) {\n          const propName = this.headerValues[i];\n          rowAsArray[i] = row[propName];\n        }\n      } else {\n        throw new Error('Each row must be an object or an array');\n      }\n      rowsAsArrays.push(rowAsArray);\n    });\n    const response = await this._spreadsheet.axios.request({\n      method: 'post',\n      url: `/values/${this.encodedA1SheetName}!A${this._headerRowIndex}:append`,\n      params: {\n        valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n        insertDataOption: options.insert ? 'INSERT_ROWS' : 'OVERWRITE',\n        includeValuesInResponse: true\n      },\n      data: {\n        values: rowsAsArrays\n      }\n    });\n\n    // extract the new row number from the A1-notation data range in the response\n    // ex: in \"'Sheet8!A2:C2\" -- we want the `2`\n    const {\n      updatedRange\n    } = response.data.updates;\n    let rowNumber = updatedRange.match(/![A-Z]+([0-9]+):?/)[1];\n    rowNumber = parseInt(rowNumber);\n\n    // if new rows were added, we need update sheet.rowRount\n    if (options.insert) {\n      this._rawProperties.gridProperties.rowCount += rows.length;\n    } else if (rowNumber + rows.length > this.rowCount) {\n      // have to subtract 1 since one row was inserted at rowNumber\n      this._rawProperties.gridProperties.rowCount = rowNumber + rows.length - 1;\n    }\n    return _.map(response.data.updates.updatedData.values, rowValues => {\n      const row = new GoogleSpreadsheetRow(this, rowNumber++, rowValues);\n      return row;\n    });\n  }\n  async addRow(rowValues, options) {\n    const rows = await this.addRows([rowValues], options);\n    return rows[0];\n  }\n  async getRows(options = {}) {\n    // https://developers.google.com/sheets/api/guides/migration\n    // v4 API does not have equivalents for the row-order query parameters provided\n    // Reverse-order is trivial; simply process the returned values array in reverse order.\n    // Order by column is not supported for reads, but it is possible to sort the data then read\n\n    // v4 API does not currently have a direct equivalent for the Sheets API v3 structured queries\n    // However, you can retrieve the relevant data and sort through it as needed in your application\n\n    // options\n    // - offset\n    // - limit\n\n    options.offset = options.offset || 0;\n    options.limit = options.limit || this.rowCount - 1;\n    if (!this.headerValues) await this.loadHeaderRow();\n    const firstRow = 1 + this._headerRowIndex + options.offset;\n    const lastRow = firstRow + options.limit - 1; // inclusive so we subtract 1\n    const lastColumn = columnToLetter(this.headerValues.length);\n    const rawRows = await this.getCellsInRange(`A${firstRow}:${lastColumn}${lastRow}`);\n    if (!rawRows) return [];\n    const rows = [];\n    let rowNum = firstRow;\n    for (let i = 0; i < rawRows.length; i++) {\n      rows.push(new GoogleSpreadsheetRow(this, rowNum++, rawRows[i]));\n    }\n    return rows;\n  }\n  async clearRows(options = {}) {\n    // default to first row after header\n    const startRowIndex = options.start || this._headerRowIndex + 1;\n    const endRowIndex = options.end || this.rowCount;\n    await this._spreadsheet.axios.post(`/values/${this.encodedA1SheetName}!${startRowIndex}:${endRowIndex}:clear`);\n  }\n\n  // BASIC PROPS ///////////////////////////////////////////////////////////////////////////////////\n  async updateProperties(properties) {\n    // Request type = `updateSheetProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSheetPropertiesRequest\n\n    // properties\n    // - title (string)\n    // - index (number)\n    // - gridProperties ({ object (GridProperties) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#gridproperties\n    // - hidden (boolean)\n    // - tabColor ({ object (Color) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/other#Color\n    // - rightToLeft (boolean)\n\n    return this._makeSingleUpdateRequest('updateSheetProperties', {\n      properties: {\n        sheetId: this.sheetId,\n        ...properties\n      },\n      fields: getFieldMask(properties)\n    });\n  }\n  async updateGridProperties(gridProperties) {\n    // just passes the call through to update gridProperties\n    // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#GridProperties\n\n    // gridProperties\n    // - rowCount\n    // - columnCount\n    // - frozenRowCount\n    // - frozenColumnCount\n    // - hideGridLines\n    return this.updateProperties({\n      gridProperties\n    });\n  }\n\n  // just a shortcut because resize makes more sense to change rowCount / columnCount\n  async resize(gridProperties) {\n    return this.updateGridProperties(gridProperties);\n  }\n  async updateDimensionProperties(columnsOrRows, properties, bounds) {\n    // Request type = `updateDimensionProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#updatedimensionpropertiesrequest\n\n    // columnsOrRows = COLUMNS|ROWS\n    // properties\n    // - pixelSize\n    // - hiddenByUser\n    // - developerMetadata\n    // bounds\n    // - startIndex\n    // - endIndex\n\n    return this._makeSingleUpdateRequest('updateDimensionProperties', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        ...(bounds && {\n          startIndex: bounds.startIndex,\n          endIndex: bounds.endIndex\n        })\n      },\n      properties,\n      fields: getFieldMask(properties)\n    });\n  }\n\n  // OTHER /////////////////////////////////////////////////////////////////////////////////////////\n\n  // this uses the \"values\" getter and does not give all the info about the cell contents\n  // it is used internally when loading header cells\n  async getCellsInRange(a1Range, options) {\n    const response = await this._spreadsheet.axios.get(`/values/${this.encodedA1SheetName}!${a1Range}`, {\n      params: options\n    });\n    return response.data.values;\n  }\n  async updateNamedRange() {\n    // Request type = `updateNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateNamedRangeRequest\n  }\n  async addNamedRange() {\n    // Request type = `addNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddNamedRangeRequest\n  }\n  async deleteNamedRange() {\n    // Request type = `deleteNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteNamedRangeRequest\n  }\n  async repeatCell() {\n    // Request type = `repeatCell`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RepeatCellRequest\n  }\n  async autoFill() {\n    // Request type = `autoFill`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoFillRequest\n  }\n  async cutPaste() {\n    // Request type = `cutPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CutPasteRequest\n  }\n  async copyPaste() {\n    // Request type = `copyPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CopyPasteRequest\n  }\n  async mergeCells(range, mergeType = 'MERGE_ALL') {\n    // Request type = `mergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('mergeCells', {\n      mergeType,\n      range: {\n        ...range,\n        sheetId: this.sheetId\n      }\n    });\n  }\n  async unmergeCells(range) {\n    // Request type = `unmergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UnmergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('unmergeCells', {\n      range: {\n        ...range,\n        sheetId: this.sheetId\n      }\n    });\n  }\n  async updateBorders() {\n    // Request type = `updateBorders`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBordersRequest\n  }\n  async addFilterView() {\n    // Request type = `addFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddFilterViewRequest\n  }\n  async appendCells() {\n    // Request type = `appendCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendCellsRequest\n  }\n  async clearBasicFilter() {\n    // Request type = `clearBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#ClearBasicFilterRequest\n  }\n  async deleteDimension() {\n    // Request type = `deleteDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionRequest\n  }\n  async deleteEmbeddedObject() {\n    // Request type = `deleteEmbeddedObject`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteEmbeddedObjectRequest\n  }\n  async deleteFilterView() {\n    // Request type = `deleteFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteFilterViewRequest\n  }\n  async duplicateFilterView() {\n    // Request type = `duplicateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateFilterViewRequest\n  }\n  async duplicate(options = {}) {\n    // Request type = `duplicateSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateSheetRequest\n    const response = await this._makeSingleUpdateRequest('duplicateSheet', {\n      sourceSheetId: this.sheetId,\n      ...(options.index !== undefined && {\n        insertSheetIndex: options.index\n      }),\n      ...(options.id && {\n        newSheetId: options.id\n      }),\n      ...(options.title && {\n        newSheetName: options.title\n      })\n    });\n    const newSheetId = response.properties.sheetId;\n    return this._spreadsheet.sheetsById[newSheetId];\n  }\n  async findReplace() {\n    // Request type = `findReplace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#FindReplaceRequest\n  }\n  async insertDimension(columnsOrRows, range, inheritFromBefore = null) {\n    // Request type = `insertDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertDimensionRequest\n\n    if (!columnsOrRows) throw new Error('You need to specify a dimension. i.e. COLUMNS|ROWS');\n    if (!_.isObject(range)) throw new Error('`range` must be an object containing `startIndex` and `endIndex`');\n    if (!_.isInteger(range.startIndex) || range.startIndex < 0) throw new Error('range.startIndex must be an integer >=0');\n    if (!_.isInteger(range.endIndex) || range.endIndex < 0) throw new Error('range.endIndex must be an integer >=0');\n    if (range.endIndex <= range.startIndex) throw new Error('range.endIndex must be greater than range.startIndex');\n\n    // default inheritFromBefore to true - unless inserting in the first row/column\n    if (inheritFromBefore === null) {\n      inheritFromBefore = range.startIndex > 0;\n    }\n\n    // do not allow inheritFromBefore if inserting at first row/column\n    if (inheritFromBefore && range.startIndex === 0) {\n      throw new Error('Cannot set inheritFromBefore to true if inserting in first row/column');\n    }\n    return this._makeSingleUpdateRequest('insertDimension', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        startIndex: range.startIndex,\n        endIndex: range.endIndex\n      },\n      inheritFromBefore\n    });\n  }\n  async insertRange() {\n    // Request type = `insertRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertRangeRequest\n  }\n  async moveDimension() {\n    // Request type = `moveDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MoveDimensionRequest\n  }\n  async updateEmbeddedObjectPosition() {\n    // Request type = `updateEmbeddedObjectPosition`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateEmbeddedObjectPositionRequest\n  }\n  async pasteData() {\n    // Request type = `pasteData`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#PasteDataRequest\n  }\n  async textToColumns() {\n    // Request type = `textToColumns`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TextToColumnsRequest\n  }\n  async updateFilterView() {\n    // Request type = `updateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateFilterViewRequest\n  }\n  async deleteRange() {\n    // Request type = `deleteRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteRangeRequest\n  }\n  async appendDimension() {\n    // Request type = `appendDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendDimensionRequest\n  }\n  async addConditionalFormatRule() {\n    // Request type = `addConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddConditionalFormatRuleRequest\n  }\n  async updateConditionalFormatRule() {\n    // Request type = `updateConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateConditionalFormatRuleRequest\n  }\n  async deleteConditionalFormatRule() {\n    // Request type = `deleteConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteConditionalFormatRuleRequest\n  }\n  async sortRange() {\n    // Request type = `sortRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SortRangeRequest\n  }\n  async setDataValidation() {\n    // Request type = `setDataValidation`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetDataValidationRequest\n  }\n  async setBasicFilter() {\n    // Request type = `setBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetBasicFilterRequest\n  }\n  async addProtectedRange() {\n    // Request type = `addProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddProtectedRangeRequest\n  }\n  async updateProtectedRange() {\n    // Request type = `updateProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateProtectedRangeRequest\n  }\n  async deleteProtectedRange() {\n    // Request type = `deleteProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteProtectedRangeRequest\n  }\n  async autoResizeDimensions() {\n    // Request type = `autoResizeDimensions`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoResizeDimensionsRequest\n  }\n  async addChart() {\n    // Request type = `addChart`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddChartRequest\n  }\n  async updateChartSpec() {\n    // Request type = `updateChartSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateChartSpecRequest\n  }\n  async updateBanding() {\n    // Request type = `updateBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBandingRequest\n  }\n  async addBanding() {\n    // Request type = `addBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddBandingRequest\n  }\n  async deleteBanding() {\n    // Request type = `deleteBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteBandingRequest\n  }\n  async createDeveloperMetadata() {\n    // Request type = `createDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CreateDeveloperMetadataRequest\n  }\n  async updateDeveloperMetadata() {\n    // Request type = `updateDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDeveloperMetadataRequest\n  }\n  async deleteDeveloperMetadata() {\n    // Request type = `deleteDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDeveloperMetadataRequest\n  }\n  async randomizeRange() {\n    // Request type = `randomizeRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RandomizeRangeRequest\n  }\n  async addDimensionGroup() {\n    // Request type = `addDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddDimensionGroupRequest\n  }\n  async deleteDimensionGroup() {\n    // Request type = `deleteDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionGroupRequest\n  }\n  async updateDimensionGroup() {\n    // Request type = `updateDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDimensionGroupRequest\n  }\n  async trimWhitespace() {\n    // Request type = `trimWhitespace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TrimWhitespaceRequest\n  }\n  async deleteDuplicates() {\n    // Request type = `deleteDuplicates`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDuplicatesRequest\n  }\n  async addSlicer() {\n    // Request type = `addSlicer`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSlicerRequest\n  }\n  async updateSlicerSpec() {\n    // Request type = `updateSlicerSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSlicerSpecRequest\n  }\n\n  // delete this worksheet\n  async delete() {\n    return this._spreadsheet.deleteSheet(this.sheetId);\n  }\n  async del() {\n    return this.delete();\n  } // alias to mimic old interface\n\n  // copies this worksheet into another document/spreadsheet\n  async copyToSpreadsheet(destinationSpreadsheetId) {\n    return this._spreadsheet.axios.post(`/sheets/${this.sheetId}:copyTo`, {\n      destinationSpreadsheetId\n    });\n  }\n  async clear(a1Range) {\n    // clears data in the sheet - defaults to entire sheet\n    const range = a1Range ? `!${a1Range}` : '';\n    // sheet name without ie 'sheet1' rather than 'sheet1'!A1:B5 is all cells\n    await this._spreadsheet.axios.post(`/values/${this.encodedA1SheetName}${range}:clear`);\n    this.resetLocalCache(true);\n  }\n  async downloadAsCSV(returnStreamInsteadOfBuffer = false) {\n    return this._spreadsheet._downloadAs('csv', this.sheetId, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsTSV(returnStreamInsteadOfBuffer = false) {\n    return this._spreadsheet._downloadAs('tsv', this.sheetId, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsPDF(returnStreamInsteadOfBuffer = false) {\n    return this._spreadsheet._downloadAs('pdf', this.sheetId, returnStreamInsteadOfBuffer);\n  }\n}\nmodule.exports = GoogleSpreadsheetWorksheet;","map":{"version":3,"names":["_","require","GoogleSpreadsheetRow","GoogleSpreadsheetCell","getFieldMask","columnToLetter","letterToColumn","checkForDuplicateHeaders","headers","checkForDupes","groupBy","each","grouped","header","length","Error","GoogleSpreadsheetWorksheet","constructor","parentSpreadsheet","properties","data","_spreadsheet","_headerRowIndex","_rawProperties","_cells","_rowMetadata","_columnMetadata","_fillCellData","_makeSingleUpdateRequest","requestType","requestParams","_ensureInfoLoaded","resetLocalCache","dataOnly","headerValues","dataRanges","range","startRow","startColumn","numRows","rowMetadata","numColumns","columnMetadata","i","actualRow","j","actualColumn","cellData","get","_updateRawData","_getProp","param","_setProp","newVal","sheetId","title","index","sheetType","gridProperties","hidden","tabColor","rightToLeft","rowCount","columnCount","colCount","a1SheetName","replace","encodedA1SheetName","encodeURIComponent","lastColumnLetter","cellStats","allCells","flatten","compact","nonEmpty","filter","c","value","loaded","total","getCellByA1","a1Address","split","match","columnIndex","rowIndex","parseInt","getCell","loadCells","sheetFilters","filtersArray","isArray","map","isString","startsWith","isObject","saveUpdatedCells","cellsToSave","_isDirty","saveCells","cellsToUpdate","requests","cell","_getUpdateRequest","responseRanges","_makeBatchUpdateRequest","loadHeaderRow","headerRowIndex","undefined","rows","getCellsInRange","trim","setHeaderRow","trimmedHeaderValues","h","response","axios","request","method","url","params","valueInputOption","includeValuesInResponse","majorDimension","values","times","updatedData","addRows","options","includes","rowsAsArrays","row","rowAsArray","propName","push","raw","insertDataOption","insert","updatedRange","updates","rowNumber","rowValues","addRow","getRows","offset","limit","firstRow","lastRow","lastColumn","rawRows","rowNum","clearRows","startRowIndex","start","endRowIndex","end","post","updateProperties","fields","updateGridProperties","resize","updateDimensionProperties","columnsOrRows","bounds","dimension","startIndex","endIndex","a1Range","updateNamedRange","addNamedRange","deleteNamedRange","repeatCell","autoFill","cutPaste","copyPaste","mergeCells","mergeType","unmergeCells","updateBorders","addFilterView","appendCells","clearBasicFilter","deleteDimension","deleteEmbeddedObject","deleteFilterView","duplicateFilterView","duplicate","sourceSheetId","insertSheetIndex","id","newSheetId","newSheetName","sheetsById","findReplace","insertDimension","inheritFromBefore","isInteger","insertRange","moveDimension","updateEmbeddedObjectPosition","pasteData","textToColumns","updateFilterView","deleteRange","appendDimension","addConditionalFormatRule","updateConditionalFormatRule","deleteConditionalFormatRule","sortRange","setDataValidation","setBasicFilter","addProtectedRange","updateProtectedRange","deleteProtectedRange","autoResizeDimensions","addChart","updateChartSpec","updateBanding","addBanding","deleteBanding","createDeveloperMetadata","updateDeveloperMetadata","deleteDeveloperMetadata","randomizeRange","addDimensionGroup","deleteDimensionGroup","updateDimensionGroup","trimWhitespace","deleteDuplicates","addSlicer","updateSlicerSpec","delete","deleteSheet","del","copyToSpreadsheet","destinationSpreadsheetId","clear","downloadAsCSV","returnStreamInsteadOfBuffer","_downloadAs","downloadAsTSV","downloadAsPDF","module","exports"],"sources":["C:/Users/79818/shop1/node_modules/google-spreadsheet/lib/GoogleSpreadsheetWorksheet.js"],"sourcesContent":["const _ = require('lodash');\n\nconst GoogleSpreadsheetRow = require('./GoogleSpreadsheetRow');\nconst GoogleSpreadsheetCell = require('./GoogleSpreadsheetCell');\n\nconst { getFieldMask, columnToLetter, letterToColumn } = require('./utils');\n\nfunction checkForDuplicateHeaders(headers) {\n  // check for duplicate headers\n  const checkForDupes = _.groupBy(headers); // { c1: ['c1'], c2: ['c2', 'c2' ]}\n  _.each(checkForDupes, (grouped, header) => {\n    if (!header) return; // empty columns are skipped, so multiple is ok\n    if (grouped.length > 1) {\n      throw new Error(`Duplicate header detected: \"${header}\". Please make sure all non-empty headers are unique`);\n    }\n  });\n}\n\nclass GoogleSpreadsheetWorksheet {\n  constructor(parentSpreadsheet, { properties, data }) {\n    this._spreadsheet = parentSpreadsheet; // the parent GoogleSpreadsheet instance\n\n    this._headerRowIndex = 1; // assume \"header row\" (for row-based calls) is in first row\n\n    // basic properties\n    this._rawProperties = properties;\n\n    this._cells = []; // we will use a 2d sparse array to store cells;\n\n    this._rowMetadata = []; // 1d sparse array\n    this._columnMetadata = [];\n\n    if (data) this._fillCellData(data);\n\n    return this;\n  }\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    // pass the call up to the parent\n    return this._spreadsheet._makeSingleUpdateRequest(requestType, {\n      // sheetId: this.sheetId,\n      ...requestParams,\n    });\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) {\n      throw new Error('You must call `doc.loadInfo()` again before accessing this property');\n    }\n  }\n\n  resetLocalCache(dataOnly) {\n    if (!dataOnly) this._rawProperties = null;\n    this.headerValues = null;\n    this._headerRowIndex = 1;\n    this._cells = [];\n  }\n\n  _fillCellData(dataRanges) {\n    _.each(dataRanges, (range) => {\n      const startRow = range.startRow || 0;\n      const startColumn = range.startColumn || 0;\n      const numRows = range.rowMetadata.length;\n      const numColumns = range.columnMetadata.length;\n\n      // update cell data for entire range\n      for (let i = 0; i < numRows; i++) {\n        const actualRow = startRow + i;\n        for (let j = 0; j < numColumns; j++) {\n          const actualColumn = startColumn + j;\n\n          // if the row has not been initialized yet, do it\n          if (!this._cells[actualRow]) this._cells[actualRow] = [];\n\n          // see if the response includes some info for the cell\n          const cellData = _.get(range, `rowData[${i}].values[${j}]`);\n\n          // update the cell object or create it\n          if (this._cells[actualRow][actualColumn]) {\n            this._cells[actualRow][actualColumn]._updateRawData(cellData);\n          } else {\n            this._cells[actualRow][actualColumn] = new GoogleSpreadsheetCell(\n              this,\n              actualRow,\n              actualColumn,\n              cellData\n            );\n          }\n        }\n      }\n\n      // update row metadata\n      for (let i = 0; i < range.rowMetadata.length; i++) {\n        this._rowMetadata[startRow + i] = range.rowMetadata[i];\n      }\n      // update column metadata\n      for (let i = 0; i < range.columnMetadata.length; i++) {\n        this._columnMetadata[startColumn + i] = range.columnMetadata[i];\n      }\n    });\n  }\n\n\n  // PROPERTY GETTERS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get sheetId() { return this._getProp('sheetId'); }\n  get title() { return this._getProp('title'); }\n  get index() { return this._getProp('index'); }\n  get sheetType() { return this._getProp('sheetType'); }\n  get gridProperties() { return this._getProp('gridProperties'); }\n  get hidden() { return this._getProp('hidden'); }\n  get tabColor() { return this._getProp('tabColor'); }\n  get rightToLeft() { return this._getProp('rightToLeft'); }\n\n  set sheetId(newVal) { return this._setProp('sheetId', newVal); }\n  set title(newVal) { return this._setProp('title', newVal); }\n  set index(newVal) { return this._setProp('index', newVal); }\n  set sheetType(newVal) { return this._setProp('sheetType', newVal); }\n  set gridProperties(newVal) { return this._setProp('gridProperties', newVal); }\n  set hidden(newVal) { return this._setProp('hidden', newVal); }\n  set tabColor(newVal) { return this._setProp('tabColor', newVal); }\n  set rightToLeft(newVal) { return this._setProp('rightToLeft', newVal); }\n\n  get rowCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.rowCount;\n  }\n  get columnCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.columnCount;\n  }\n  get colCount() { throw new Error('`colCount` is deprecated - please use `columnCount` instead.'); }\n  set rowCount(newVal) { throw new Error('Do not update directly. Use resize()'); }\n  set columnCount(newVal) { throw new Error('Do not update directly. Use resize()'); }\n\n  get a1SheetName() { return `'${this.title.replace(/'/g, \"''\")}'`; }\n  get encodedA1SheetName() { return encodeURIComponent(this.a1SheetName); }\n  get lastColumnLetter() { return columnToLetter(this.columnCount); }\n\n\n  // CELLS-BASED INTERACTIONS //////////////////////////////////////////////////////////////////////\n\n  get cellStats() {\n    let allCells = _.flatten(this._cells);\n    allCells = _.compact(allCells);\n    return {\n      nonEmpty: _.filter(allCells, (c) => c.value).length,\n      loaded: allCells.length,\n      total: this.rowCount * this.columnCount,\n    };\n  }\n\n  getCellByA1(a1Address) {\n    const split = a1Address.match(/([A-Z]+)([0-9]+)/);\n    const columnIndex = letterToColumn(split[1]);\n    const rowIndex = parseInt(split[2]);\n    return this.getCell(rowIndex - 1, columnIndex - 1);\n  }\n\n  getCell(rowIndex, columnIndex) {\n    if (rowIndex < 0 || columnIndex < 0) throw new Error('Min coordinate is 0, 0');\n    if (rowIndex >= this.rowCount || columnIndex >= this.columnCount) {\n      throw new Error(`Out of bounds, sheet is ${this.rowCount} by ${this.columnCount}`);\n    }\n\n    if (!_.get(this._cells, `[${rowIndex}][${columnIndex}]`)) {\n      throw new Error('This cell has not been loaded yet');\n    }\n    return this._cells[rowIndex][columnIndex];\n  }\n\n  async loadCells(sheetFilters) {\n    // load the whole sheet\n    if (!sheetFilters) return this._spreadsheet.loadCells(this.a1SheetName);\n\n    let filtersArray = _.isArray(sheetFilters) ? sheetFilters : [sheetFilters];\n    filtersArray = _.map(filtersArray, (filter) => {\n      // add sheet name to A1 ranges\n      if (_.isString(filter)) {\n        if (filter.startsWith(this.a1SheetName)) return filter;\n        return `${this.a1SheetName}!${filter}`;\n      }\n      if (_.isObject(filter)) {\n        // TODO: detect and support DeveloperMetadata filters\n        if (!filter.sheetId) {\n          return { sheetId: this.sheetId, ...filter };\n        }\n        if (filter.sheetId !== this.sheetId) {\n          throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n        } else {\n          return filter;\n        }\n      } else {\n        throw new Error('Each filter must be a A1 range string or gridrange object');\n      }\n    });\n    return this._spreadsheet.loadCells(filtersArray);\n  }\n\n  async saveUpdatedCells() {\n    const cellsToSave = _.filter(_.flatten(this._cells), { _isDirty: true });\n    if (cellsToSave.length) {\n      await this.saveCells(cellsToSave);\n    }\n    // TODO: do we want to return stats? or the cells that got updated?\n  }\n\n  async saveCells(cellsToUpdate) {\n    // we send an individual \"updateCells\" request for each cell\n    // because the fields that are udpated for each group are the same\n    // and we dont want to accidentally overwrite something\n    const requests = _.map(cellsToUpdate, (cell) => cell._getUpdateRequest());\n    const responseRanges = _.map(cellsToUpdate, (c) => `${this.a1SheetName}!${c.a1Address}`);\n\n    // if nothing is being updated the request returned is just `null`\n    // so we make sure at least 1 request is valid - otherwise google throws a 400\n    if (!_.compact(requests).length) {\n      throw new Error('At least one cell must have something to update');\n    }\n\n    await this._spreadsheet._makeBatchUpdateRequest(requests, responseRanges);\n  }\n\n  // SAVING THIS FOR FUTURE USE\n  // puts the cells that need updating into batches\n  // async updateCellsByBatches() {\n  //   // saving this code, but it's problematic because each group must have the same update fields\n  //   const cellsByRow = _.groupBy(cellsToUpdate, 'rowIndex');\n  //   const groupsToSave = [];\n  //   _.each(cellsByRow, (cells, rowIndex) => {\n  //     let cellGroup = [];\n  //     _.each(cells, (c) => {\n  //       if (!cellGroup.length) {\n  //         cellGroup.push(c);\n  //       } else if (\n  //         cellGroup[cellGroup.length - 1].columnIndex ===\n  //         c.columnIndex - 1\n  //       ) {\n  //         cellGroup.push(c);\n  //       } else {\n  //         groupsToSave.push(cellGroup);\n  //         cellGroup = [];\n  //       }\n  //     });\n  //     groupsToSave.push(cellGroup);\n  //   });\n  //   const requests = _.map(groupsToSave, (cellGroup) => ({\n  //     updateCells: {\n  //       rows: [\n  //         {\n  //           values: _.map(cellGroup, (cell) => ({\n  //             ...cell._draftData.value && {\n  //               userEnteredValue: { [cell._draftData.valueType]: cell._draftData.value },\n  //             },\n  //             ...cell._draftData.note !== undefined && {\n  //               note: cell._draftData.note ,\n  //             },\n  //             ...cell._draftData.userEnteredFormat && {\n  //               userEnteredValue: cell._draftData.userEnteredFormat,\n  //             },\n  //           })),\n  //         },\n  //       ],\n  //       fields: 'userEnteredValue,note,userEnteredFormat',\n  //       start: {\n  //         sheetId: this.sheetId,\n  //         rowIndex: cellGroup[0].rowIndex,\n  //         columnIndex: cellGroup[0].columnIndex,\n  //       },\n  //     },\n  //   }));\n  //   const responseRanges = _.map(groupsToSave, (cellGroup) => {\n  //     let a1Range = cellGroup[0].a1Address;\n  //     if (cellGroup.length > 1)\n  //       a1Range += `:${cellGroup[cellGroup.length - 1].a1Address}`;\n  //     return `${cellGroup[0]._sheet.a1SheetName}!${a1Range}`;\n  //   });\n  // }\n\n  // ROW BASED FUNCTIONS ///////////////////////////////////////////////////////////////////////////\n\n  async loadHeaderRow(headerRowIndex) {\n    if (headerRowIndex !== undefined) this._headerRowIndex = headerRowIndex;\n    const rows = await this.getCellsInRange(`A${this._headerRowIndex}:${this.lastColumnLetter}${this._headerRowIndex}`);\n    if (!rows) {\n      throw new Error('No values in the header row - fill the first row with header values before trying to interact with rows');\n    }\n    this.headerValues = _.map(rows[0], (header) => header.trim());\n    if (!_.compact(this.headerValues).length) {\n      throw new Error('All your header cells are blank - fill the first row with header values before trying to interact with rows');\n    }\n    checkForDuplicateHeaders(this.headerValues);\n  }\n\n  async setHeaderRow(headerValues, headerRowIndex) {\n    if (!headerValues) return;\n    if (headerValues.length > this.columnCount) {\n      throw new Error(`Sheet is not large enough to fit ${headerValues.length} columns. Resize the sheet first.`);\n    }\n    const trimmedHeaderValues = _.map(headerValues, (h) => h.trim());\n    checkForDuplicateHeaders(trimmedHeaderValues);\n\n    if (!_.compact(trimmedHeaderValues).length) {\n      throw new Error('All your header cells are blank -');\n    }\n\n    if (headerRowIndex) this._headerRowIndex = headerRowIndex;\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'put',\n      url: `/values/${this.encodedA1SheetName}!${this._headerRowIndex}:${this._headerRowIndex}`,\n      params: {\n        valueInputOption: 'USER_ENTERED', // other option is RAW\n        includeValuesInResponse: true,\n      },\n      data: {\n        range: `${this.a1SheetName}!${this._headerRowIndex}:${this._headerRowIndex}`,\n        majorDimension: 'ROWS',\n        values: [[\n          ...trimmedHeaderValues,\n          // pad the rest of the row with empty values to clear them all out\n          ..._.times(this.columnCount - trimmedHeaderValues.length, () => ''),\n        ]],\n      },\n    });\n    this.headerValues = response.data.updatedData.values[0];\n  }\n\n  async addRows(rows, options = {}) {\n    // adds multiple rows in one API interaction using the append endpoint\n\n    // each row can be an array or object\n    // an array is just cells\n    // ex: ['column 1', 'column 2', 'column 3']\n    // an object must use the header row values as keys\n    // ex: { col1: 'column 1', col2: 'column 2', col3: 'column 3' }\n\n    // google bug that does not handle colons in names\n    // see https://issuetracker.google.com/issues/150373119\n    if (this.title.includes(':')) {\n      throw new Error('Please remove the \":\" from your sheet title. There is a bug with the google API which breaks appending rows if any colons are in the sheet title.');\n    }\n\n    if (!_.isArray(rows)) throw new Error('You must pass in an array of row values to append');\n\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    // convert each row into an array of cell values rather than the key/value object\n    const rowsAsArrays = [];\n    _.each(rows, (row) => {\n      let rowAsArray;\n      if (_.isArray(row)) {\n        rowAsArray = row;\n      } else if (_.isObject(row)) {\n        rowAsArray = [];\n        for (let i = 0; i < this.headerValues.length; i++) {\n          const propName = this.headerValues[i];\n          rowAsArray[i] = row[propName];\n        }\n      } else {\n        throw new Error('Each row must be an object or an array');\n      }\n      rowsAsArrays.push(rowAsArray);\n    });\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'post',\n      url: `/values/${this.encodedA1SheetName}!A${this._headerRowIndex}:append`,\n      params: {\n        valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n        insertDataOption: options.insert ? 'INSERT_ROWS' : 'OVERWRITE',\n        includeValuesInResponse: true,\n      },\n      data: {\n        values: rowsAsArrays,\n      },\n    });\n\n    // extract the new row number from the A1-notation data range in the response\n    // ex: in \"'Sheet8!A2:C2\" -- we want the `2`\n    const { updatedRange } = response.data.updates;\n    let rowNumber = updatedRange.match(/![A-Z]+([0-9]+):?/)[1];\n    rowNumber = parseInt(rowNumber);\n\n    // if new rows were added, we need update sheet.rowRount\n    if (options.insert) {\n      this._rawProperties.gridProperties.rowCount += rows.length;\n    } else if (rowNumber + rows.length > this.rowCount) {\n      // have to subtract 1 since one row was inserted at rowNumber\n      this._rawProperties.gridProperties.rowCount = rowNumber + rows.length - 1;\n    }\n\n    return _.map(response.data.updates.updatedData.values, (rowValues) => {\n      const row = new GoogleSpreadsheetRow(this, rowNumber++, rowValues);\n      return row;\n    });\n  }\n\n  async addRow(rowValues, options) {\n    const rows = await this.addRows([rowValues], options);\n    return rows[0];\n  }\n\n  async getRows(options = {}) {\n    // https://developers.google.com/sheets/api/guides/migration\n    // v4 API does not have equivalents for the row-order query parameters provided\n    // Reverse-order is trivial; simply process the returned values array in reverse order.\n    // Order by column is not supported for reads, but it is possible to sort the data then read\n\n    // v4 API does not currently have a direct equivalent for the Sheets API v3 structured queries\n    // However, you can retrieve the relevant data and sort through it as needed in your application\n\n    // options\n    // - offset\n    // - limit\n\n    options.offset = options.offset || 0;\n    options.limit = options.limit || this.rowCount - 1;\n\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    const firstRow = 1 + this._headerRowIndex + options.offset;\n    const lastRow = firstRow + options.limit - 1; // inclusive so we subtract 1\n    const lastColumn = columnToLetter(this.headerValues.length);\n    const rawRows = await this.getCellsInRange(\n      `A${firstRow}:${lastColumn}${lastRow}`\n    );\n\n    if (!rawRows) return [];\n\n    const rows = [];\n    let rowNum = firstRow;\n    for (let i = 0; i < rawRows.length; i++) {\n      rows.push(new GoogleSpreadsheetRow(this, rowNum++, rawRows[i]));\n    }\n    return rows;\n  }\n\n  async clearRows(options = {}) {\n    // default to first row after header\n    const startRowIndex = options.start || this._headerRowIndex + 1;\n    const endRowIndex = options.end || this.rowCount;\n    await this._spreadsheet.axios.post(`/values/${this.encodedA1SheetName}!${startRowIndex}:${endRowIndex}:clear`);\n  }\n\n  // BASIC PROPS ///////////////////////////////////////////////////////////////////////////////////\n  async updateProperties(properties) {\n    // Request type = `updateSheetProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSheetPropertiesRequest\n\n    // properties\n    // - title (string)\n    // - index (number)\n    // - gridProperties ({ object (GridProperties) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#gridproperties\n    // - hidden (boolean)\n    // - tabColor ({ object (Color) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/other#Color\n    // - rightToLeft (boolean)\n\n    return this._makeSingleUpdateRequest('updateSheetProperties', {\n      properties: {\n        sheetId: this.sheetId,\n        ...properties,\n      },\n      fields: getFieldMask(properties),\n    });\n  }\n\n  async updateGridProperties(gridProperties) {\n    // just passes the call through to update gridProperties\n    // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#GridProperties\n\n    // gridProperties\n    // - rowCount\n    // - columnCount\n    // - frozenRowCount\n    // - frozenColumnCount\n    // - hideGridLines\n    return this.updateProperties({ gridProperties });\n  }\n\n  // just a shortcut because resize makes more sense to change rowCount / columnCount\n  async resize(gridProperties) {\n    return this.updateGridProperties(gridProperties);\n  }\n\n  async updateDimensionProperties(columnsOrRows, properties, bounds) {\n    // Request type = `updateDimensionProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#updatedimensionpropertiesrequest\n\n    // columnsOrRows = COLUMNS|ROWS\n    // properties\n    // - pixelSize\n    // - hiddenByUser\n    // - developerMetadata\n    // bounds\n    // - startIndex\n    // - endIndex\n\n    return this._makeSingleUpdateRequest('updateDimensionProperties', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        ...bounds && {\n          startIndex: bounds.startIndex,\n          endIndex: bounds.endIndex,\n        },\n      },\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // OTHER /////////////////////////////////////////////////////////////////////////////////////////\n\n  // this uses the \"values\" getter and does not give all the info about the cell contents\n  // it is used internally when loading header cells\n  async getCellsInRange(a1Range, options) {\n    const response = await this._spreadsheet.axios.get(`/values/${this.encodedA1SheetName}!${a1Range}`, {\n      params: options,\n    });\n    return response.data.values;\n  }\n\n  async updateNamedRange() {\n    // Request type = `updateNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateNamedRangeRequest\n  }\n\n  async addNamedRange() {\n    // Request type = `addNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddNamedRangeRequest\n  }\n\n  async deleteNamedRange() {\n    // Request type = `deleteNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteNamedRangeRequest\n  }\n\n  async repeatCell() {\n    // Request type = `repeatCell`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RepeatCellRequest\n  }\n\n  async autoFill() {\n    // Request type = `autoFill`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoFillRequest\n  }\n\n  async cutPaste() {\n    // Request type = `cutPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CutPasteRequest\n  }\n\n  async copyPaste() {\n    // Request type = `copyPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CopyPasteRequest\n  }\n\n  async mergeCells(range, mergeType = 'MERGE_ALL') {\n    // Request type = `mergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('mergeCells', {\n      mergeType,\n      range: {\n        ...range,\n        sheetId: this.sheetId,\n      },\n    });\n  }\n\n  async unmergeCells(range) {\n    // Request type = `unmergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UnmergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('unmergeCells', {\n      range: {\n        ...range,\n        sheetId: this.sheetId,\n      },\n    });\n  }\n\n  async updateBorders() {\n    // Request type = `updateBorders`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBordersRequest\n  }\n\n  async addFilterView() {\n    // Request type = `addFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddFilterViewRequest\n  }\n\n  async appendCells() {\n    // Request type = `appendCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendCellsRequest\n  }\n\n  async clearBasicFilter() {\n    // Request type = `clearBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#ClearBasicFilterRequest\n  }\n\n  async deleteDimension() {\n    // Request type = `deleteDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionRequest\n  }\n\n  async deleteEmbeddedObject() {\n    // Request type = `deleteEmbeddedObject`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteEmbeddedObjectRequest\n  }\n\n  async deleteFilterView() {\n    // Request type = `deleteFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteFilterViewRequest\n  }\n\n  async duplicateFilterView() {\n    // Request type = `duplicateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateFilterViewRequest\n  }\n\n  async duplicate(options = {}) {\n    // Request type = `duplicateSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateSheetRequest\n    const response = await this._makeSingleUpdateRequest('duplicateSheet', {\n      sourceSheetId: this.sheetId,\n      ...options.index !== undefined && { insertSheetIndex: options.index },\n      ...options.id && { newSheetId: options.id },\n      ...options.title && { newSheetName: options.title },\n    });\n    const newSheetId = response.properties.sheetId;\n    return this._spreadsheet.sheetsById[newSheetId];\n  }\n\n  async findReplace() {\n    // Request type = `findReplace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#FindReplaceRequest\n  }\n\n  async insertDimension(columnsOrRows, range, inheritFromBefore = null) {\n    // Request type = `insertDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertDimensionRequest\n\n    if (!columnsOrRows) throw new Error('You need to specify a dimension. i.e. COLUMNS|ROWS');\n    if (!_.isObject(range)) throw new Error('`range` must be an object containing `startIndex` and `endIndex`');\n    if (!_.isInteger(range.startIndex) || range.startIndex < 0) throw new Error('range.startIndex must be an integer >=0');\n    if (!_.isInteger(range.endIndex) || range.endIndex < 0) throw new Error('range.endIndex must be an integer >=0');\n    if (range.endIndex <= range.startIndex) throw new Error('range.endIndex must be greater than range.startIndex');\n\n    // default inheritFromBefore to true - unless inserting in the first row/column\n    if (inheritFromBefore === null) {\n      inheritFromBefore = range.startIndex > 0;\n    }\n\n    // do not allow inheritFromBefore if inserting at first row/column\n    if (inheritFromBefore && range.startIndex === 0) {\n      throw new Error('Cannot set inheritFromBefore to true if inserting in first row/column');\n    }\n\n    return this._makeSingleUpdateRequest('insertDimension', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        startIndex: range.startIndex,\n        endIndex: range.endIndex,\n      },\n      inheritFromBefore,\n    });\n  }\n\n  async insertRange() {\n    // Request type = `insertRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertRangeRequest\n  }\n\n  async moveDimension() {\n    // Request type = `moveDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MoveDimensionRequest\n  }\n\n  async updateEmbeddedObjectPosition() {\n    // Request type = `updateEmbeddedObjectPosition`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateEmbeddedObjectPositionRequest\n  }\n\n  async pasteData() {\n    // Request type = `pasteData`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#PasteDataRequest\n  }\n\n  async textToColumns() {\n    // Request type = `textToColumns`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TextToColumnsRequest\n  }\n\n  async updateFilterView() {\n    // Request type = `updateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateFilterViewRequest\n  }\n\n  async deleteRange() {\n    // Request type = `deleteRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteRangeRequest\n  }\n\n  async appendDimension() {\n    // Request type = `appendDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendDimensionRequest\n  }\n\n  async addConditionalFormatRule() {\n    // Request type = `addConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddConditionalFormatRuleRequest\n  }\n\n  async updateConditionalFormatRule() {\n    // Request type = `updateConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateConditionalFormatRuleRequest\n  }\n\n  async deleteConditionalFormatRule() {\n    // Request type = `deleteConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteConditionalFormatRuleRequest\n  }\n\n  async sortRange() {\n    // Request type = `sortRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SortRangeRequest\n  }\n\n  async setDataValidation() {\n    // Request type = `setDataValidation`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetDataValidationRequest\n  }\n\n  async setBasicFilter() {\n    // Request type = `setBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetBasicFilterRequest\n  }\n\n  async addProtectedRange() {\n    // Request type = `addProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddProtectedRangeRequest\n  }\n\n  async updateProtectedRange() {\n    // Request type = `updateProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateProtectedRangeRequest\n  }\n\n  async deleteProtectedRange() {\n    // Request type = `deleteProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteProtectedRangeRequest\n  }\n\n  async autoResizeDimensions() {\n    // Request type = `autoResizeDimensions`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoResizeDimensionsRequest\n  }\n\n  async addChart() {\n    // Request type = `addChart`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddChartRequest\n  }\n\n  async updateChartSpec() {\n    // Request type = `updateChartSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateChartSpecRequest\n  }\n\n  async updateBanding() {\n    // Request type = `updateBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBandingRequest\n  }\n\n  async addBanding() {\n    // Request type = `addBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddBandingRequest\n  }\n\n  async deleteBanding() {\n    // Request type = `deleteBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteBandingRequest\n  }\n\n  async createDeveloperMetadata() {\n    // Request type = `createDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CreateDeveloperMetadataRequest\n  }\n\n  async updateDeveloperMetadata() {\n    // Request type = `updateDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDeveloperMetadataRequest\n  }\n\n  async deleteDeveloperMetadata() {\n    // Request type = `deleteDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDeveloperMetadataRequest\n  }\n\n  async randomizeRange() {\n    // Request type = `randomizeRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RandomizeRangeRequest\n  }\n\n  async addDimensionGroup() {\n    // Request type = `addDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddDimensionGroupRequest\n  }\n\n  async deleteDimensionGroup() {\n    // Request type = `deleteDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionGroupRequest\n  }\n\n  async updateDimensionGroup() {\n    // Request type = `updateDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDimensionGroupRequest\n  }\n\n  async trimWhitespace() {\n    // Request type = `trimWhitespace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TrimWhitespaceRequest\n  }\n\n  async deleteDuplicates() {\n    // Request type = `deleteDuplicates`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDuplicatesRequest\n  }\n\n  async addSlicer() {\n    // Request type = `addSlicer`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSlicerRequest\n  }\n\n  async updateSlicerSpec() {\n    // Request type = `updateSlicerSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSlicerSpecRequest\n  }\n\n  // delete this worksheet\n  async delete() {\n    return this._spreadsheet.deleteSheet(this.sheetId);\n  }\n  async del() { return this.delete(); } // alias to mimic old interface\n\n  // copies this worksheet into another document/spreadsheet\n  async copyToSpreadsheet(destinationSpreadsheetId) {\n    return this._spreadsheet.axios.post(`/sheets/${this.sheetId}:copyTo`, {\n      destinationSpreadsheetId,\n    });\n  }\n\n  async clear(a1Range) {\n    // clears data in the sheet - defaults to entire sheet\n    const range = a1Range ? `!${a1Range}` : '';\n    // sheet name without ie 'sheet1' rather than 'sheet1'!A1:B5 is all cells\n    await this._spreadsheet.axios.post(`/values/${this.encodedA1SheetName}${range}:clear`);\n    this.resetLocalCache(true);\n  }\n  async downloadAsCSV(returnStreamInsteadOfBuffer = false) {\n    return this._spreadsheet._downloadAs('csv', this.sheetId, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsTSV(returnStreamInsteadOfBuffer = false) {\n    return this._spreadsheet._downloadAs('tsv', this.sheetId, returnStreamInsteadOfBuffer);\n  }\n  async downloadAsPDF(returnStreamInsteadOfBuffer = false) {\n    return this._spreadsheet._downloadAs('pdf', this.sheetId, returnStreamInsteadOfBuffer);\n  }\n}\n\nmodule.exports = GoogleSpreadsheetWorksheet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}